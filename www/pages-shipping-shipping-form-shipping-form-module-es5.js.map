{"version":3,"sources":["src/app/pages/shipping/shipping-form/shipping-form.page.html","src/app/config/countries.ts","src/app/pages/shipping/shipping-form/shipping-form.module.ts","src/app/pages/shipping/shipping-form/shipping-form.page.scss","src/app/pages/shipping/shipping-form/shipping-form.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,u3jBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACER,QAAM,WAAW,GAAmB,CACzC;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,IAAI,EAAE,eAFR;AAGE,MAAA,MAAM,EAAE,CACN,SADM,EAEN,QAFM,EAGN,SAHM,EAIN,UAJM,EAKN,YALM,EAMN,UANM,EAON,aAPM,EAQN,UARM,EASN,sBATM,EAUN,SAVM,EAWN,SAXM,EAYN,QAZM,EAaN,OAbM,EAcN,UAdM,EAeN,SAfM,EAgBN,MAhBM,EAiBN,QAjBM,EAkBN,UAlBM,EAmBN,WAnBM,EAoBN,OApBM,EAqBN,UArBM,EAsBN,eAtBM,EAuBN,UAvBM,EAwBN,WAxBM,EAyBN,aAzBM,EA0BN,UA1BM,EA2BN,SA3BM,EA4BN,UA5BM,EA6BN,QA7BM,EA8BN,eA9BM,EA+BN,YA/BM,EAgCN,YAhCM,EAiCN,UAjCM,EAkCN,gBAlCM,EAmCN,cAnCM,EAoCN,MApCM,EAqCN,UArCM,EAsCN,QAtCM,EAuCN,cAvCM,EAwCN,cAxCM,EAyCN,gBAzCM,EA0CN,cA1CM,EA2CN,WA3CM,EA4CN,OA5CM,EA6CN,MA7CM,EA8CN,SA9CM,EA+CN,UA/CM,EAgDN,YAhDM,EAiDN,eAjDM,EAkDN,WAlDM,EAmDN,SAnDM,CAHV;AAwDC,MAAA,SAAS,EAAE;AAxDZ,KADyC,EA2DzC;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,IAAI,EAAE,SAFR;AAGE,MAAA,MAAM,EAAE,CACN,MADM,EAEN,uBAFM,EAGN,SAHM,EAIN,WAJM,EAKN,SALM,EAMN,QANM,EAON,SAPM,EAQN,OARM,EASN,OATM,EAUN,aAVM,EAWN,OAXM,EAYN,QAZM,EAaN,KAbM,EAcN,OAdM,EAeN,OAfM,EAgBN,OAhBM,EAiBN,KAjBM,EAkBN,QAlBM,EAmBN,QAnBM,EAoBN,MApBM,EAqBN,SArBM,EAsBN,OAtBM,EAuBN,MAvBM,EAwBN,OAxBM,EAyBN,OAzBM,EA0BN,WA1BM,EA2BN,OA3BM,EA4BN,MA5BM,EA6BN,MA7BM,EA8BN,MA9BM,EA+BN,KA/BM,EAgCN,SAhCM,EAiCN,QAjCM,EAkCN,QAlCM,EAmCN,QAnCM,EAoCN,MApCM,EAqCN,SArCM,CAHV;AA0CC,MAAA,SAAS,EAAE;AA1CZ,KA3DyC,EAuGzC;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,IAAI,EAAE,gBAFR;AAGE,MAAA,MAAM,EAAE,CACN,sBADM,EAEN,eAFM,EAGN,eAHM,EAIN,UAJM,EAKN,OALM,EAMN,QANM,EAON,iBAPM,EAQN,QARM,EASN,MATM,EAUN,UAVM,EAWN,sBAXM,EAYN,cAZM,EAaN,SAbM,EAcN,WAdM,EAeN,cAfM,EAgBN,MAhBM,EAiBN,eAjBM,EAkBN,iBAlBM,EAmBN,iBAnBM,EAoBN,YApBM,EAqBN,WArBM,EAsBN,gBAtBM,EAuBN,SAvBM,EAwBN,eAxBM,EAyBN,iBAzBM,EA0BN,YA1BM,EA2BN,iBA3BM,EA4BN,UA5BM,EA6BN,iBA7BM,EA8BN,kBA9BM,EA+BN,OA/BM,EAgCN,OAhCM,EAiCN,iBAjCM,EAkCN,SAlCM,EAmCN,cAnCM,EAoCN,YApCM,EAqCN,mBArCM,EAsCN,OAtCM,EAuCN,QAvCM,EAwCN,MAxCM,EAyCN,uBAzCM,EA0CN,gBA1CM,EA2CN,QA3CM,EA4CN,QA5CM,EA6CN,OA7CM,EA8CN,eA9CM,EA+CN,qBA/CM,EAgDN,cAhDM,EAiDN,mBAjDM,EAkDN,uBAlDM,EAmDN,aAnDM,EAoDN,WApDM,EAqDN,SArDM,EAsDN,OAtDM,EAuDN,SAvDM,EAwDN,WAxDM,EAyDN,MAzDM,EA0DN,YA1DM,EA2DN,SA3DM,EA4DN,iBA5DM,EA6DN,gBA7DM,EA8DN,oBA9DM,EA+DN,OA/DM,EAgEN,SAhEM,EAiEN,WAjEM,EAkEN,YAlEM,EAmEN,wBAnEM,EAoEN,eApEM,EAqEN,WArEM,EAsEN,YAtEM,EAuEN,iBAvEM,EAwEN,aAxEM,EAyEN,eAzEM,EA0EN,MA1EM,EA2EN,gBA3EM,EA4EN,oBA5EM,EA6EN,eA7EM,EA8EN,UA9EM,EA+EN,aA/EM,EAgFN,YAhFM,EAiFN,gBAjFM,EAkFN,cAlFM,EAmFN,aAnFM,EAoFN,YApFM,EAqFN,gBArFM,EAsFN,eAtFM,EAuFN,aAvFM,EAwFN,WAxFM,EAyFN,eAzFM,EA0FN,OA1FM,EA2FN,qBA3FM,EA4FN,SA5FM,EA6FN,SA7FM,EA8FN,gBA9FM,EA+FN,yBA/FM,EAgGN,mBAhGM,EAiGN,oBAjGM,EAkGN,gBAlGM,EAmGN,iBAnGM,EAoGN,kBApGM,EAqGN,kBArGM,EAsGN,gBAtGM,EAuGN,iBAvGM,EAwGN,2BAxGM,EAyGN,aAzGM,EA0GN,eA1GM,EA2GN,mBA3GM,EA4GN,OA5GM,EA6GN,sBA7GM,EA8GN,cA9GM,EA+GN,mBA/GM,EAgHN,SAhHM,EAiHN,kBAjHM,EAkHN,UAlHM,EAmHN,YAnHM,EAoHN,UApHM,EAqHN,gBArHM,EAsHN,iBAtHM,EAuHN,sBAvHM,EAwHN,mBAxHM,EAyHN,iBAzHM,EA0HN,eA1HM,EA2HN,UA3HM,EA4HN,kBA5HM,EA6HN,SA7HM,EA8HN,QA9HM,EA+HN,SA/HM,EAgIN,SAhIM,EAiIN,eAjIM,EAkIN,QAlIM,EAmIN,mBAnIM,EAoIN,OApIM,EAqIN,cArIM,EAsIN,gBAtIM,EAuIN,qBAvIM,EAwIN,gBAxIM,EAyIN,cAzIM,EA0IN,eA1IM,EA2IN,aA3IM,EA4IN,gBA5IM,EA6IN,eA7IM,EA8IN,WA9IM,EA+IN,QA/IM,EAgJN,gBAhJM,EAiJN,SAjJM,EAkJN,MAlJM,CAHV;AAuJC,MAAA,SAAS,EAAE;AAvJZ,KAvGyC,EAgQzC;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,IAAI,EAAE,OAFR;AAGE,MAAA,MAAM,EACN,CACG,SADH,EAEG,aAFH,EAGG,SAHH,EAIG,SAJH,EAKG,eALH,EAMG,UANH,EAOG,YAPH,EAQG,YARH,EASG,OATH,EAUG,SAVH,CAJF;AAgBC,MAAA,SAAS,EAAE;AAhBZ,KAhQyC,EAkRzC;AACE,MAAA,GAAG,EAAE,IADP;AAEE,MAAA,IAAI,EAAE,QAFR;AAGE,MAAA,MAAM,EAAE,CACN,SADM,EAEN,kBAFM,EAGN,UAHM,EAIN,eAJM,EAKN,2BALM,EAMN,uBANM,EAON,aAPM,EAQN,SARM,EASN,SATM,EAUN,sBAVM,EAWN,QAXM,EAYN,cAZM,EAaN,iBAbM,CAHV;AAkBC,MAAA,SAAS,EAAE;AAlBZ,KAlRyC,CAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKP,QAAM,MAAM,GAAW,CACrB;AACE,MAAA,IAAI,EAAE,EADR;AAEE,MAAA,SAAS,EAAE,gDAAA,CAAA,kBAAA;AAFb,KADqB,CAAvB;;AAgBA,QAAa,sBAAb;AAAA;AAAA,KAAA;;AAAa,IAAA,sBAAsB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAVlC,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,OAAO,EAAE,CACP,4CAAA,CAAA,cAAA,CADO,EAEP,2CAAA,CAAA,aAAA,CAFO,EAGP,2CAAA,CAAA,aAAA,CAHO,EAIP,2CAAA,CAAA,qBAAA,CAJO,EAKP,4CAAA,CAAA,cAAA,CAAA,CAAa,QAAb,CAAsB,MAAtB,CALO,CADD;AAQR,MAAA,YAAY,EAAE,CAAC,gDAAA,CAAA,kBAAA,CAAD;AARN,KAAT,CAUkC,CAAA,EAAtB,sBAAsB,CAAtB;;;;;;;;;;;;;;;;ACvBb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,isJAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaf,QAAa,gBAAb;AAAA;AAAA;AA0CE,gCAAoB,MAApB,EAA4C,KAA5C,EAAyE,OAAzE,EAAgG;AAAA;;AAA5E,aAAA,MAAA,GAAA,MAAA;AAAwB,aAAA,KAAA,GAAA,KAAA;AAA6B,aAAA,OAAA,GAAA,OAAA;AAvCzE,aAAA,SAAA,GAAY,EAAZ;AACA,aAAA,MAAA,GAAS,EAAT;AACA,aAAA,IAAA,GAAO,CAAP;AACA,aAAA,SAAA,GAAY,CAAZ;AACA,aAAA,aAAA,GAAgB,KAAK,IAAL,GAAY,KAAK,SAAjC;AAEA,aAAA,WAAA,GAAc;AACZ,kBAAQ,CACN;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,OAAO,EAAE;AAA7B,WADM,CADI;AAIZ,0BAAgB,CACd;AAAE,YAAA,IAAI,EAAE,WAAR;AAAqB,YAAA,OAAO,EAAE;AAA9B,WADc,EAEd;AAAE,YAAA,IAAI,EAAE,WAAR;AAAqB,YAAA,OAAO,EAAE;AAA9B,WAFc,CAJJ;AAQZ,sBAAY,CACV;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,OAAO,EAAE;AAA7B,WADU,EAEV;AAAE,YAAA,IAAI,EAAE,WAAR;AAAqB,YAAA,OAAO,EAAE;AAA9B,WAFU,EAGV;AAAE,YAAA,IAAI,EAAE,WAAR;AAAqB,YAAA,OAAO,EAAE;AAA9B,WAHU,CARA;AAaZ,sBAAY,CACV;AAAE,YAAA,IAAI,EAAE,WAAR;AAAqB,YAAA,OAAO,EAAE;AAA9B,WADU,EAEV;AAAE,YAAA,IAAI,EAAE,WAAR;AAAqB,YAAA,OAAO,EAAE;AAA9B,WAFU,CAbA;AAiBZ,wBAAc,CACZ;AAAE,YAAA,IAAI,EAAE,WAAR;AAAqB,YAAA,OAAO,EAAE;AAA9B,WADY,EAEZ;AAAE,YAAA,IAAI,EAAE,WAAR;AAAqB,YAAA,OAAO,EAAE;AAA9B,WAFY,CAjBF;AAqBZ,mBAAS,CACP;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,OAAO,EAAE;AAA7B,WADO,EAEP;AAAE,YAAA,IAAI,EAAE,SAAR;AAAmB,YAAA,OAAO,EAAE;AAA5B,WAFO,CArBG;AAyBZ,kBAAQ,CACN;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,OAAO,EAAE;AAA7B,WADM,CAzBI;AA4BZ,mBAAS,CACP;AAAE,YAAA,IAAI,EAAE,UAAR;AAAoB,YAAA,OAAO,EAAE;AAA7B,WADO,EAEP;AAAE,YAAA,IAAI,EAAE,SAAR;AAAmB,YAAA,OAAO,EAAE;AAA5B,WAFO;AA5BG,SAAd;AAiCqG;;AA1CvG;AAAA;AAAA,2CA4CkB;AACf,eAAK,OAAL,CAAa,cAAb;AACA;AA9CH;AAAA;AAAA,0CA+CiB;AACd,eAAK,OAAL,CAAa,OAAb;AACA;AAjDH;AAAA;AAAA,mCAmDU;AACN,eAAK,SAAL,GAAiB,8CAAA,CAAA,aAAA,CAAjB;AACA,eAAK,MAAL,GAAc,8CAAA,CAAA,aAAA,CAAA,CAAY,CAAZ,EAAe,MAA7B;AAEA,eAAK,UAAL,GAAkB,IAAI,2CAAA,CAAA,WAAA,CAAJ,CAAc;AAC9B,oBAAQ,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,QAA/B,CADsB;AAE9B,4BAAgB,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CACrD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,EAArB,CADqD,EAErD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CAFqD,CAAnB,CAApB,CAFc;AAM9B,uBAAW,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,KAAK,SAAL,CAAe,CAAf,CAAhB,EAAmC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAA9C,CANmB;AAO9B,wBAAY,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CACjD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,EAArB,CADiD,EAEjD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CAFiD,EAGjD,2CAAA,CAAA,YAAA,CAAA,CAAW,QAHsC,CAAnB,CAApB,CAPkB;AAY9B,wBAAY,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CACjD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,EAArB,CADiD,EAEjD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CAFiD,CAAnB,CAApB,CAZkB;AAgB9B,0BAAc,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CACnD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CADmD,EAEnD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CAFmD,CAAnB,CAApB,CAhBgB;AAoB9B,oBAAQ,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,QAA/B,CApBsB;AAqB9B,qBAAS,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,KAAK,SAAL,CAAe,CAAf,EAAkB,MAAlB,CAAyB,CAAzB,CAAhB,EAA6C,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAxD,CArBqB;AAsB9B,qBAAS,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAC9C,2CAAA,CAAA,YAAA,CAAA,CAAW,QADmC,EAE9C,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,qBAAnB,CAF8C,CAAnB,CAApB,CAtBqB;AA0B9B,qBAAS,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAC9C,2CAAA,CAAA,YAAA,CAAA,CAAW,QADmC,EAE9C,2CAAA,CAAA,YAAA,CAAA,CAAW,KAFmC,EAG9C,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,iDAAnB,CAH8C,CAAnB,CAApB;AA1BqB,WAAd,CAAlB;AAiCA,eAAK,eAAL,GAAuB,IAAI,2CAAA,CAAA,WAAA,CAAJ,CAAc;AACnC,oBAAQ,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,QAA/B,CAD2B;AAEnC,4BAAgB,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CACrD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,EAArB,CADqD,EAErD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CAFqD,CAAnB,CAApB,CAFmB;AAMnC,uBAAW,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,KAAK,SAAL,CAAe,CAAf,CAAhB,EAAmC,2CAAA,CAAA,YAAA,CAAA,CAAW,QAA9C,CANwB;AAOnC,wBAAY,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CACjD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,EAArB,CADiD,EAEjD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CAFiD,EAGjD,2CAAA,CAAA,YAAA,CAAA,CAAW,QAHsC,CAAnB,CAApB,CAPuB;AAYnC,wBAAY,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CACjD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,EAArB,CADiD,EAEjD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CAFiD,CAAnB,CAApB,CAZuB;AAgBnC,0BAAc,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CACnD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CADmD,EAEnD,2CAAA,CAAA,YAAA,CAAA,CAAW,SAAX,CAAqB,CAArB,CAFmD,CAAnB,CAApB,CAhBqB;AAoBnC,oBAAQ,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,QAA/B,CApB2B;AAqBnC,qBAAS,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,KAAK,SAAL,CAAe,CAAf,EAAkB,MAAlB,CAAyB,CAAzB,CAAhB,EAA6C,2CAAA,CAAA,YAAA,CAAA,CAAW,QAAxD,CArB0B;AAsBnC,qBAAS,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAC9C,2CAAA,CAAA,YAAA,CAAA,CAAW,QADmC,EAE9C,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,qBAAnB,CAF8C,CAAnB,CAApB,CAtB0B;AA0BnC,qBAAS,IAAI,2CAAA,CAAA,aAAA,CAAJ,CAAgB,EAAhB,EAAoB,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,CAC9C,2CAAA,CAAA,YAAA,CAAA,CAAW,QADmC,EAE9C,2CAAA,CAAA,YAAA,CAAA,CAAW,OAAX,CAAmB,iDAAnB,CAF8C,CAAnB,CAApB;AA1B0B,WAAd,CAAvB;AA+BD;AAvHH;AAAA;AAAA,wCAwHkB,CAxHlB,EAwHmB;AACf,eAAK,MAAL,GAAc,CAAC,CAAC,MAAF,CAAS,KAAT,CAAe,MAA7B;AACD;AA1HH;AAAA;AAAA,+BA4HM;AACF,eAAK,OAAL,CAAa,cAAb;AACA,eAAK,IAAL,IAAa,CAAb;AACA,eAAK,OAAL,CAAa,OAAb;AACA,eAAK,aAAL,GAAqB,KAAK,IAAL,GAAY,KAAK,SAAtC;AACD;AAjIH;AAAA;AAAA,+BAmIM;AACF,eAAK,OAAL,CAAa,cAAb;;AACA,cAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;AACnB,iBAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,WAAD,CAArB;AACA,iBAAK,UAAL,CAAgB,KAAhB;AACA,iBAAK,eAAL,CAAqB,KAArB;AACA,iBAAK,OAAL,CAAa,OAAb;AACD,WALD,MAKO;AACL,iBAAK,IAAL,IAAa,CAAb;AACA,iBAAK,OAAL,CAAa,OAAb;AACA,iBAAK,aAAL,GAAqB,KAAK,IAAL,GAAY,KAAK,SAAtC;AACD;AACF;AA/IH;AAAA;AAAA,uCAgJc;AACV,eAAK,MAAL,CAAY,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACA,eAAK,UAAL,CAAgB,KAAhB;AACA,eAAK,eAAL,CAAqB,KAArB;AACD;AApJH;;AAAA;AAAA,OAAA;;;;cA0C8B,4CAAA,CAAA,QAAA;;cAAuB,oDAAA,CAAA,cAAA;;cAA+B,sDAAA,CAAA,gBAAA;;;;AA1CvE,IAAA,gBAAgB,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAL5B,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,mBADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,4GAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAK4B,E,uEA0CC,4CAAA,CAAA,QAAA,C,EAAuB,oDAAA,CAAA,cAAA,C,EAA+B,sDAAA,CAAA,gBAAA,C,EA1CvD,CAAA,EAAhB,gBAAgB,CAAhB","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"prev()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title>\\n      <img\\n        class=\\\"headerlogog\\\"\\n        alt=\\\"Uranse\\\"\\n        src=\\\"/assets/images/uranselogo-white.png\\\"\\n      />\\n    </ion-title>\\n    <ion-buttons slot=\\\"primary\\\">\\n      <ion-button (click)=\\\"navigateHome()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"home\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-progress-bar\\n      color=\\\"tertiary\\\"\\n      value=\\\"{{ progressValue }}\\\"\\n    ></ion-progress-bar>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <form [formGroup]=\\\"senderForm\\\" *ngIf=\\\"step == 1\\\" class=\\\"ion-padding\\\">\\n    <div>\\n      <ion-text><h4>Where are you shipping from?</h4></ion-text>\\n    </div>\\n    <ion-list class=\\\"inputs-list\\\" lines=\\\"full\\\">\\n      <!-- Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n         &nbsp; Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"name\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.name\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('name').hasError(validation.type) &&\\n              (senderForm.get('name').dirty || senderForm.get('name').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!--Business Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Business Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"businessname\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.businessname\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('businessname').hasError(validation.type) &&\\n              (senderForm.get('businessname').dirty ||\\n                senderForm.get('businessname').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Country -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">Country</ion-label>\\n        <ion-select\\n          formControlName=\\\"country\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          (ionChange)=\\\"onCountryChange($event)\\\"\\n        >\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\" >\\n            {{ item.name }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!--Address 1 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 1\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address1\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address1\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('address1').hasError(validation.type) &&\\n              (senderForm.get('address1').dirty ||\\n                senderForm.get('address1').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Address 2 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 2\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address2\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address2\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('address2').hasError(validation.type) &&\\n              (senderForm.get('address2').dirty ||\\n                senderForm.get('address2').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Postal code -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Postal Code\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"postalcode\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.postalcode\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('postalcode').hasError(validation.type) &&\\n              (senderForm.get('postalcode').dirty ||\\n                senderForm.get('postalcode').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- City / town -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; City/Town\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"city\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.city\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('city').hasError(validation.type) &&\\n              (senderForm.get('city').dirty || senderForm.get('city').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- State -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;State / Province</ion-label>\\n        <ion-select\\n          formControlName=\\\"state\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          [disabled]=\\\"!(senderForm.get('country').dirty ||\\n          senderForm.get('country').touched)\\\"\\n        >\\n          <ion-select-option\\n            *ngFor=\\\"let item of states\\\"\\n            [value]=\\\"item\\\"\\n          >\\n            {{ item }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Phone -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Phone\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"phone\\\"\\n          clearInput\\n          required\\n          placeholder=\\\"{{ senderForm.value.country.phoneCode }}\\\"\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.phone\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('phone').hasError(validation.type) &&\\n              (senderForm.get('phone').dirty || senderForm.get('phone').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Email -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Email\\n        </ion-label>\\n        <ion-input\\n          type=\\\"email\\\"\\n          formControlName=\\\"email\\\"\\n          clearInput\\n          inputmode=\\\"email\\\"\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.email\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('email').hasError(validation.type) &&\\n              (senderForm.get('email').dirty || senderForm.get('email').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n    </ion-list>\\n\\n    <ion-button\\n      expand=\\\"full\\\"\\n      color=\\\"tertiary\\\"\\n      [disabled]=\\\"!senderForm.valid\\\"\\n      (click)=\\\"next()\\\"\\n    >\\n      Continue\\n    </ion-button>\\n  </form>\\n  <form [formGroup]=\\\"destinationForm\\\" *ngIf=\\\"step == 2\\\" class=\\\"ion-padding form-animate\\\">\\n    <div>\\n      <ion-text><h4>Where is this shipment going?</h4></ion-text>\\n    </div>\\n    <ion-list class=\\\"inputs-list\\\" lines=\\\"full\\\">\\n      <!-- Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"name\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.name\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('name').hasError(validation.type) &&\\n              (destinationForm.get('name').dirty ||\\n                destinationForm.get('name').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!--Business Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Business Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"businessname\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.businessname\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('businessname').hasError(validation.type) &&\\n              (destinationForm.get('businessname').dirty ||\\n                destinationForm.get('businessname').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Country -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;Country</ion-label>\\n        <ion-select\\n          formControlName=\\\"country\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          (ionChange)=\\\"onCountryChange($event)\\\"\\n        >\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">\\n            {{ item.name }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Address 1 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 1\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address1\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address1\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('address1').hasError(validation.type) &&\\n              (destinationForm.get('address1').dirty ||\\n                destinationForm.get('address1').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Address 2 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 2\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address2\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address2\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('address2').hasError(validation.type) &&\\n              (destinationForm.get('address2').dirty ||\\n                destinationForm.get('address2').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Postal Code -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Postal Code\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"postalcode\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.postalcode\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('postalcode').hasError(validation.type) &&\\n              (destinationForm.get('postalcode').dirty ||\\n                destinationForm.get('postalcode').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- City -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; City/Town\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"city\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.city\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('city').hasError(validation.type) &&\\n              (destinationForm.get('city').dirty ||\\n                destinationForm.get('city').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- State -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;State / Province</ion-label>\\n        <ion-select\\n          formControlName=\\\"state\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          [disabled]=\\\"!(destinationForm.get('country').dirty ||\\n          destinationForm.get('country').touched)\\\"\\n        >\\n          <ion-select-option\\n            *ngFor=\\\"let item of states\\\"\\n            [value]=\\\"item\\\"\\n          >\\n            {{ item }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Phone -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Phone\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"phone\\\"\\n          clearInput\\n          required\\n          placeholder=\\\"{{ destinationForm.value.country.phoneCode }}\\\"\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.phone\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('phone').hasError(validation.type) &&\\n              (destinationForm.get('phone').dirty ||\\n                destinationForm.get('phone').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Email -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Email\\n        </ion-label>\\n        <ion-input\\n          type=\\\"email\\\"\\n          formControlName=\\\"email\\\"\\n          clearInput\\n          inputmode=\\\"email\\\"\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.email\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('email').hasError(validation.type) &&\\n              (destinationForm.get('email').dirty ||\\n                destinationForm.get('email').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n    </ion-list>\\n\\n    <ion-button\\n      expand=\\\"full\\\"\\n      color=\\\"tertiary\\\"\\n      [disabled]=\\\"!destinationForm.valid\\\"\\n      (click)=\\\"next()\\\"\\n    >\\n      Continue\\n    </ion-button>\\n  </form>\\n</ion-content>\\n\"","import { CountryModel } from './../models/country-model';\r\n\r\nexport const COUNTRYLIST: CountryModel[] = [\r\n  {\r\n    iso: 'US',\r\n    name: 'United States',\r\n    states: [\r\n      'Alabama',\r\n      'Alaska',\r\n      'Arizona',\r\n      'Arkansas',\r\n      'California',\r\n      'Colorado',\r\n      'Connecticut',\r\n      'Delaware',\r\n      'District of Columbia',\r\n      'Florida',\r\n      'Georgia',\r\n      'Hawaii',\r\n      'Idaho',\r\n      'Illinois',\r\n      'Indiana',\r\n      'Iowa',\r\n      'Kansas',\r\n      'Kentucky',\r\n      'Louisiana',\r\n      'Maine',\r\n      'Maryland',\r\n      'Massachusetts',\r\n      'Michigan',\r\n      'Minnesota',\r\n      'Mississippi',\r\n      'Missouri',\r\n      'Montana',\r\n      'Nebraska',\r\n      'Nevada',\r\n      'New Hampshire',\r\n      'New Jersey',\r\n      'New Mexico',\r\n      'New York',\r\n      'North Carolina',\r\n      'North Dakota',\r\n      'Ohio',\r\n      'Oklahoma',\r\n      'Oregon',\r\n      'Pennsylvania',\r\n      'Rhode Island',\r\n      'South Carolina',\r\n      'South Dakota',\r\n      'Tennessee',\r\n      'Texas',\r\n      'Utah',\r\n      'Vermont',\r\n      'Virginia',\r\n      'Washington',\r\n      'West Virginia',\r\n      'Wisconsin',\r\n      'Wyoming'\r\n   ],\r\n   phoneCode: '+1',\r\n  },\r\n  {\r\n    iso: 'NG',\r\n    name: 'Nigeria',\r\n    states: [\r\n      'Abia',\r\n      'Abuja Federal Capital',\r\n      'Adamawa',\r\n      'Akwa Ibom',\r\n      'Anambra',\r\n      'Bauchi',\r\n      'Bayelsa',\r\n      'Benue',\r\n      'Borno',\r\n      'Cross River',\r\n      'Delta',\r\n      'Ebonyi',\r\n      'Edo',\r\n      'Ekiti',\r\n      'Enugu',\r\n      'Gombe',\r\n      'Imo',\r\n      'Jigawa',\r\n      'Kaduna',\r\n      'Kano',\r\n      'Katsina',\r\n      'Kebbi',\r\n      'Kogi',\r\n      'Kwara',\r\n      'Lagos',\r\n      'Nassarawa',\r\n      'Niger',\r\n      'Ogun',\r\n      'Ondo',\r\n      'Osun',\r\n      'Oyo',\r\n      'Plateau',\r\n      'Rivers',\r\n      'Sokoto',\r\n      'Taraba',\r\n      'Yobe',\r\n      'Zamfara'\r\n   ],\r\n   phoneCode: '+234',\r\n  },\r\n  {\r\n    iso: 'GB',\r\n    name: 'United Kingdom',\r\n    states: [ \r\n      'Aberconwy and Colwyn',\r\n      'Aberdeen City',\r\n      'Aberdeenshire',\r\n      'Anglesey',\r\n      'Angus',\r\n      'Antrim',\r\n      'Argyll and Bute',\r\n      'Armagh',\r\n      'Avon',\r\n      'Ayrshire',\r\n      'Bath and NE Somerset',\r\n      'Bedfordshire',\r\n      'Belfast',\r\n      'Berkshire',\r\n      'Berwickshire',\r\n      'BFPO',\r\n      'Blaenau Gwent',\r\n      'Buckinghamshire',\r\n      'Caernarfonshire',\r\n      'Caerphilly',\r\n      'Caithness',\r\n      'Cambridgeshire',\r\n      'Cardiff',\r\n      'Cardiganshire',\r\n      'Carmarthenshire',\r\n      'Ceredigion',\r\n      'Channel Islands',\r\n      'Cheshire',\r\n      'City of Bristol',\r\n      'Clackmannanshire',\r\n      'Clwyd',\r\n      'Conwy',\r\n      'Cornwall/Scilly',\r\n      'Cumbria',\r\n      'Denbighshire',\r\n      'Derbyshire',\r\n      'Derry/Londonderry',\r\n      'Devon',\r\n      'Dorset',\r\n      'Down',\r\n      'Dumfries and Galloway',\r\n      'Dunbartonshire',\r\n      'Dundee',\r\n      'Durham',\r\n      'Dyfed',\r\n      'East Ayrshire',\r\n      'East Dunbartonshire',\r\n      'East Lothian',\r\n      'East Renfrewshire',\r\n      'East Riding Yorkshire',\r\n      'East Sussex',\r\n      'Edinburgh',\r\n      'England',\r\n      'Essex',\r\n      'Falkirk',\r\n      'Fermanagh',\r\n      'Fife',\r\n      'Flintshire',\r\n      'Glasgow',\r\n      'Gloucestershire',\r\n      'Greater London',\r\n      'Greater Manchester',\r\n      'Gwent',\r\n      'Gwynedd',\r\n      'Hampshire',\r\n      'Hartlepool',\r\n      'Hereford and Worcester',\r\n      'Hertfordshire',\r\n      'Highlands',\r\n      'Inverclyde',\r\n      'Inverness-Shire',\r\n      'Isle of Man',\r\n      'Isle of Wight',\r\n      'Kent',\r\n      'Kincardinshire',\r\n      'Kingston Upon Hull',\r\n      'Kinross-Shire',\r\n      'Kirklees',\r\n      'Lanarkshire',\r\n      'Lancashire',\r\n      'Leicestershire',\r\n      'Lincolnshire',\r\n      'Londonderry',\r\n      'Merseyside',\r\n      'Merthyr Tydfil',\r\n      'Mid Glamorgan',\r\n      'Mid Lothian',\r\n      'Middlesex',\r\n      'Monmouthshire',\r\n      'Moray',\r\n      'Neath & Port Talbot',\r\n      'Newport',\r\n      'Norfolk',\r\n      'North Ayrshire',\r\n      'North East Lincolnshire',\r\n      'North Lanarkshire',\r\n      'North Lincolnshire',\r\n      'North Somerset',\r\n      'North Yorkshire',\r\n      'Northamptonshire',\r\n      'Northern Ireland',\r\n      'Northumberland',\r\n      'Nottinghamshire',\r\n      'Orkney and Shetland Isles',\r\n      'Oxfordshire',\r\n      'Pembrokeshire',\r\n      'Perth and Kinross',\r\n      'Powys',\r\n      'Redcar and Cleveland',\r\n      'Renfrewshire',\r\n      'Rhonda Cynon Taff',\r\n      'Rutland',\r\n      'Scottish Borders',\r\n      'Shetland',\r\n      'Shropshire',\r\n      'Somerset',\r\n      'South Ayrshire',\r\n      'South Glamorgan',\r\n      'South Gloucesteshire',\r\n      'South Lanarkshire',\r\n      'South Yorkshire',\r\n      'Staffordshire',\r\n      'Stirling',\r\n      'Stockton On Tees',\r\n      'Suffolk',\r\n      'Surrey',\r\n      'Swansea',\r\n      'Torfaen',\r\n      'Tyne and Wear',\r\n      'Tyrone',\r\n      'Vale Of Glamorgan',\r\n      'Wales',\r\n      'Warwickshire',\r\n      'West Berkshire',\r\n      'West Dunbartonshire',\r\n      'West Glamorgan',\r\n      'West Lothian',\r\n      'West Midlands',\r\n      'West Sussex',\r\n      'West Yorkshire',\r\n      'Western Isles',\r\n      'Wiltshire',\r\n      'Wirral',\r\n      'Worcestershire',\r\n      'Wrexham',\r\n      'York'\r\n   ],\r\n   phoneCode: '+44',\r\n  },\r\n  {\r\n    iso: 'GH',\r\n    name: 'Ghana',\r\n    states:\r\n    [\r\n       'Ashanti',\r\n       'Brong-Ahafo',\r\n       'Central',\r\n       'Eastern',\r\n       'Greater Accra',\r\n       'Northern',\r\n       'Upper East',\r\n       'Upper West',\r\n       'Volta',\r\n       'Western'\r\n    ],\r\n   phoneCode: '+233',\r\n  },\r\n  {\r\n    iso: 'CA',\r\n    name: 'Canada',\r\n    states: [\r\n      'Alberta',\r\n      'British Columbia',\r\n      'Manitoba',\r\n      'New Brunswick',\r\n      'Newfoundland and Labrador',\r\n      'Northwest Territories',\r\n      'Nova Scotia',\r\n      'Nunavut',\r\n      'Ontario',\r\n      'Prince Edward Island',\r\n      'Quebec',\r\n      'Saskatchewan',\r\n      'Yukon Territory'\r\n   ],\r\n   phoneCode: '+1',\r\n  }\r\n];\r\n","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { ShippingFormPage } from './shipping-form.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ShippingFormPage\n  }\n];\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ShippingFormPage]\n})\nexport class ShippingFormPageModule {}\n","export default \".inputs-list {\\n  --ion-item-background: var(--page-background);\\n  padding: var(--page-margin) var(--page-margin) calc(var(--page-margin) * 2);\\n}\\n.inputs-list ion-list-header {\\n  -webkit-padding-start: 0px;\\n          padding-inline-start: 0px;\\n}\\n.inputs-list ion-list-header .header-title {\\n  text-transform: uppercase;\\n  font-size: 16px;\\n  color: var(--ion-color-secondary);\\n}\\n.inputs-list .input-item {\\n  --padding-start: 0px;\\n  --padding-end: 0px;\\n  --inner-padding-end: 0px;\\n}\\n.inputs-list .error-container .error-message {\\n  margin: calc(var(--page-margin) / 2) 0px;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  color: var(--ion-color-danger);\\n  font-size: 14px;\\n}\\n.inputs-list .error-container .error-message ion-icon {\\n  -webkit-padding-end: calc(var(--page-margin) / 2);\\n          padding-inline-end: calc(var(--page-margin) / 2);\\n  flex-shrink: 0;\\n}\\n.ng-valid[required], .ng-valid.required, .ng-invalid[required], .ng-invalid.required {\\n  border-left: 2px solid #7951ff;\\n}\\n.form-animate {\\n  -webkit-transition: all 0.3s ease-out;\\n  transition: all 0.3s ease-out;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvc2hpcHBpbmcvc2hpcHBpbmctZm9ybS9DOlxcVXNlcnNcXHZhZGV5ZW1pXFxEb2N1bWVudHNcXGdvYXZpbmNlXFx1cmFuc2UtbW9iaWxlL3NyY1xcYXBwXFxwYWdlc1xcc2hpcHBpbmdcXHNoaXBwaW5nLWZvcm1cXHNoaXBwaW5nLWZvcm0ucGFnZS5zY3NzIiwic3JjL2FwcC9wYWdlcy9zaGlwcGluZy9zaGlwcGluZy1mb3JtL3NoaXBwaW5nLWZvcm0ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsNkNBQUE7RUFFQSwyRUFBQTtBQ0FGO0FERUU7RUFDRSwwQkFBQTtVQUFBLHlCQUFBO0FDQUo7QURFSTtFQUNFLHlCQUFBO0VBQ0EsZUFBQTtFQUNBLGlDQUFBO0FDQU47QURJRTtFQUNFLG9CQUFBO0VBQ0Esa0JBQUE7RUFDQSx3QkFBQTtBQ0ZKO0FETUU7RUFDRSx3Q0FBQTtFQUNBLG9CQUFBO0VBQUEsYUFBQTtFQUNBLHlCQUFBO1VBQUEsbUJBQUE7RUFDQSw4QkFBQTtFQUNBLGVBQUE7QUNKSjtBRE1JO0VBQ0UsaURBQUE7VUFBQSxnREFBQTtFQUNBLGNBQUE7QUNKTjtBRFVBO0VBQ0UsOEJBQUE7QUNQRjtBRFNBO0VBQ0UscUNBQUE7RUFBQSw2QkFBQTtBQ05GIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvc2hpcHBpbmcvc2hpcHBpbmctZm9ybS9zaGlwcGluZy1mb3JtLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbnB1dHMtbGlzdCB7XHJcbiAgLS1pb24taXRlbS1iYWNrZ3JvdW5kOiB2YXIoLS1wYWdlLWJhY2tncm91bmQpO1xyXG5cclxuICBwYWRkaW5nOiB2YXIoLS1wYWdlLW1hcmdpbikgdmFyKC0tcGFnZS1tYXJnaW4pIGNhbGModmFyKC0tcGFnZS1tYXJnaW4pICogMik7XHJcblxyXG4gIGlvbi1saXN0LWhlYWRlciB7XHJcbiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xyXG5cclxuICAgIC5oZWFkZXItdGl0bGUge1xyXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgIGNvbG9yOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5pbnB1dC1pdGVtIHtcclxuICAgIC0tcGFkZGluZy1zdGFydDogMHB4O1xyXG4gICAgLS1wYWRkaW5nLWVuZDogMHB4O1xyXG4gICAgLS1pbm5lci1wYWRkaW5nLWVuZDogMHB4O1xyXG4gIH1cclxuXHJcbi5lcnJvci1jb250YWluZXIge1xyXG4gIC5lcnJvci1tZXNzYWdlIHtcclxuICAgIG1hcmdpbjogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKSAwcHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItZGFuZ2VyKTtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuXHJcbiAgICBpb24taWNvbiB7XHJcbiAgICAgIHBhZGRpbmctaW5saW5lLWVuZDogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKTtcclxuICAgICAgZmxleC1zaHJpbms6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbn1cclxuXHJcbi5uZy12YWxpZFtyZXF1aXJlZF0sIC5uZy12YWxpZC5yZXF1aXJlZCwgLm5nLWludmFsaWRbcmVxdWlyZWRdLCAubmctaW52YWxpZC5yZXF1aXJlZCAge1xyXG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzc5NTFmZjtcclxufVxyXG4uZm9ybS1hbmltYXRle1xyXG4gIHRyYW5zaXRpb246IGFsbCAuM3MgZWFzZS1vdXQ7XHJcbn0iLCIuaW5wdXRzLWxpc3Qge1xuICAtLWlvbi1pdGVtLWJhY2tncm91bmQ6IHZhcigtLXBhZ2UtYmFja2dyb3VuZCk7XG4gIHBhZGRpbmc6IHZhcigtLXBhZ2UtbWFyZ2luKSB2YXIoLS1wYWdlLW1hcmdpbikgY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgKiAyKTtcbn1cbi5pbnB1dHMtbGlzdCBpb24tbGlzdC1oZWFkZXIge1xuICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xufVxuLmlucHV0cy1saXN0IGlvbi1saXN0LWhlYWRlciAuaGVhZGVyLXRpdGxlIHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXNlY29uZGFyeSk7XG59XG4uaW5wdXRzLWxpc3QgLmlucHV0LWl0ZW0ge1xuICAtLXBhZGRpbmctc3RhcnQ6IDBweDtcbiAgLS1wYWRkaW5nLWVuZDogMHB4O1xuICAtLWlubmVyLXBhZGRpbmctZW5kOiAwcHg7XG59XG4uaW5wdXRzLWxpc3QgLmVycm9yLWNvbnRhaW5lciAuZXJyb3ItbWVzc2FnZSB7XG4gIG1hcmdpbjogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKSAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItZGFuZ2VyKTtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuLmlucHV0cy1saXN0IC5lcnJvci1jb250YWluZXIgLmVycm9yLW1lc3NhZ2UgaW9uLWljb24ge1xuICBwYWRkaW5nLWlubGluZS1lbmQ6IGNhbGModmFyKC0tcGFnZS1tYXJnaW4pIC8gMik7XG4gIGZsZXgtc2hyaW5rOiAwO1xufVxuXG4ubmctdmFsaWRbcmVxdWlyZWRdLCAubmctdmFsaWQucmVxdWlyZWQsIC5uZy1pbnZhbGlkW3JlcXVpcmVkXSwgLm5nLWludmFsaWQucmVxdWlyZWQge1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICM3OTUxZmY7XG59XG5cbi5mb3JtLWFuaW1hdGUge1xuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLW91dDtcbn0iXX0= */\"","import { SpinnerService } from './../../../services/spinner.service';\nimport { AlertService } from './../../../services/alert.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {COUNTRYLIST} from './../../../config/countries';\n\n\n@Component({\n  selector: 'app-shipping-form',\n  templateUrl: './shipping-form.page.html',\n  styleUrls: ['./shipping-form.page.scss'],\n})\nexport class ShippingFormPage implements OnInit {\n  senderForm: FormGroup;\n  destinationForm: FormGroup;\n  countries = [];\n  states = [];\n  step = 1;\n  totalStep = 4;\n  progressValue = this.step / this.totalStep;\n\n  validations = {\n    'name': [\n      { type: 'required', message: 'Name is required.' },\n    ],\n    'businessname': [\n      { type: 'minlength', message: 'Business name must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Business name cannot be more than 50 characters long.' },\n    ],\n    'address1': [\n      { type: 'required', message: 'Address is required.' },\n      { type: 'minlength', message: 'Address must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 50 characters long.' },\n    ],\n    'address2': [\n      { type: 'minlength', message: 'Address must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 50 characters long.' },\n    ],\n    'postalcode': [\n      { type: 'minlength', message: 'Address must be at least 3 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 6 characters long.' },\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'pattern', message: 'Enter a valid phone number.' }\n    ],\n    'city': [\n      { type: 'required', message: 'City is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n  };\n  constructor(private router: Router, private alert: AlertService, private spinner: SpinnerService) { }\n\n  ionViewWillEnter() {\n   this.spinner.presentLoading();\n  }\n  ionViewDidEnter() {\n   this.spinner.dismiss();\n  }\n\n  ngOnInit(): void {\n    this.countries = COUNTRYLIST;\n    this.states = COUNTRYLIST[0].states;\n\n    this.senderForm = new FormGroup({\n      'name': new FormControl('', Validators.required),\n      'businessname': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'country': new FormControl(this.countries[0], Validators.required),\n      'address1': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5),\n        Validators.required\n      ])),\n      'address2': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'postalcode': new FormControl('', Validators.compose([\n        Validators.maxLength(6),\n        Validators.minLength(3)\n      ])),\n      'city': new FormControl('', Validators.required),\n      'state': new FormControl(this.countries[0].states[0], Validators.required),\n      'phone': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^\\\\+[1-9]\\\\d{1,14}$')\n      ])),\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.email,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n    });\n\n    this.destinationForm = new FormGroup({\n      'name': new FormControl('', Validators.required),\n      'businessname': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'country': new FormControl(this.countries[0], Validators.required),\n      'address1': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5),\n        Validators.required\n      ])),\n      'address2': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'postalcode': new FormControl('', Validators.compose([\n        Validators.maxLength(6),\n        Validators.minLength(3)\n      ])),\n      'city': new FormControl('', Validators.required),\n      'state': new FormControl(this.countries[0].states[0], Validators.required),\n      'phone': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^\\\\+[1-9]\\\\d{1,14}$')\n      ])),\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n    });\n  }\n  onCountryChange(e) {\n    this.states = e.target.value.states;\n  };\n\n  next() {\n    this.spinner.presentLoading();\n    this.step += 1;\n    this.spinner.dismiss();\n    this.progressValue = this.step / this.totalStep;\n  }\n\n  prev() {\n    this.spinner.presentLoading();\n    if (this.step === 1) {\n      this.router.navigate(['home/ship']);\n      this.senderForm.reset();\n      this.destinationForm.reset();\n      this.spinner.dismiss();\n    } else {\n      this.step -= 1;\n      this.spinner.dismiss();\n      this.progressValue = this.step / this.totalStep;\n    }\n  }\n  navigateHome() {\n    this.router.navigate(['/home']);\n    this.senderForm.reset();\n    this.destinationForm.reset();\n  }\n}\n"],"sourceRoot":"webpack:///","file":"pages-shipping-shipping-form-shipping-form-module-es5.js"}