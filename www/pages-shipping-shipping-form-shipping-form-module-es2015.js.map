{"version":3,"sources":["./src/app/pages/shipping/shipping-form/shipping-form.page.html","./src/app/config/countries.ts","./src/app/pages/shipping/shipping-form/shipping-form.module.ts","./src/app/pages/shipping/shipping-form/shipping-form.page.scss","./src/app/pages/shipping/shipping-form/shipping-form.page.ts"],"names":[],"mappings":"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","file":"pages-shipping-shipping-form-shipping-form-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"prev()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title>\\n      <img\\n        class=\\\"headerlogog\\\"\\n        alt=\\\"Uranse\\\"\\n        src=\\\"/assets/images/uranselogo-white.png\\\"\\n      />\\n    </ion-title>\\n    <ion-buttons slot=\\\"primary\\\">\\n      <ion-button (click)=\\\"navigateHome()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"home\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-progress-bar\\n      color=\\\"tertiary\\\"\\n      value=\\\"{{ progressValue }}\\\"\\n    ></ion-progress-bar>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <form [formGroup]=\\\"senderForm\\\" *ngIf=\\\"step == 1\\\" class=\\\"ion-padding\\\">\\n    <div>\\n      <ion-text><h4>Where are you shipping from?</h4></ion-text>\\n    </div>\\n    <ion-list class=\\\"inputs-list\\\" lines=\\\"full\\\">\\n      <!-- Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n         &nbsp; Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"name\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.name\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('name').hasError(validation.type) &&\\n              (senderForm.get('name').dirty || senderForm.get('name').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!--Business Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Business Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"businessname\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.businessname\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('businessname').hasError(validation.type) &&\\n              (senderForm.get('businessname').dirty ||\\n                senderForm.get('businessname').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Country -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">Country</ion-label>\\n        <ion-select\\n          formControlName=\\\"country\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          (ionChange)=\\\"onCountryChange($event)\\\"\\n        >\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\" >\\n            {{ item.name }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!--Address 1 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 1\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address1\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address1\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('address1').hasError(validation.type) &&\\n              (senderForm.get('address1').dirty ||\\n                senderForm.get('address1').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Address 2 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 2\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address2\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address2\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('address2').hasError(validation.type) &&\\n              (senderForm.get('address2').dirty ||\\n                senderForm.get('address2').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Postal code -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Postal Code\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"postalcode\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.postalcode\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('postalcode').hasError(validation.type) &&\\n              (senderForm.get('postalcode').dirty ||\\n                senderForm.get('postalcode').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- City / town -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; City/Town\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"city\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.city\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('city').hasError(validation.type) &&\\n              (senderForm.get('city').dirty || senderForm.get('city').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- State -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;State / Province</ion-label>\\n        <ion-select\\n          formControlName=\\\"state\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          [disabled]=\\\"!(senderForm.get('country').dirty ||\\n          senderForm.get('country').touched)\\\"\\n        >\\n          <ion-select-option\\n            *ngFor=\\\"let item of states\\\"\\n            [value]=\\\"item\\\"\\n          >\\n            {{ item }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Phone -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Phone\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"phone\\\"\\n          clearInput\\n          required\\n          placeholder=\\\"{{ senderForm.value.country.phoneCode }}\\\"\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.phone\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('phone').hasError(validation.type) &&\\n              (senderForm.get('phone').dirty || senderForm.get('phone').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Email -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Email\\n        </ion-label>\\n        <ion-input\\n          type=\\\"email\\\"\\n          formControlName=\\\"email\\\"\\n          clearInput\\n          inputmode=\\\"email\\\"\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.email\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('email').hasError(validation.type) &&\\n              (senderForm.get('email').dirty || senderForm.get('email').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n    </ion-list>\\n\\n    <ion-button\\n      expand=\\\"full\\\"\\n      color=\\\"tertiary\\\"\\n      [disabled]=\\\"!senderForm.valid\\\"\\n      (click)=\\\"next()\\\"\\n    >\\n      Continue\\n    </ion-button>\\n  </form>\\n  <form [formGroup]=\\\"destinationForm\\\" *ngIf=\\\"step == 2\\\" class=\\\"ion-padding form-animate\\\">\\n    <div>\\n      <ion-text><h4>Where is this shipment going?</h4></ion-text>\\n    </div>\\n    <ion-list class=\\\"inputs-list\\\" lines=\\\"full\\\">\\n      <!-- Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"name\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.name\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('name').hasError(validation.type) &&\\n              (destinationForm.get('name').dirty ||\\n                destinationForm.get('name').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!--Business Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Business Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"businessname\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.businessname\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('businessname').hasError(validation.type) &&\\n              (destinationForm.get('businessname').dirty ||\\n                destinationForm.get('businessname').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Country -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;Country</ion-label>\\n        <ion-select\\n          formControlName=\\\"country\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          (ionChange)=\\\"onCountryChange($event)\\\"\\n        >\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">\\n            {{ item.name }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Address 1 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 1\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address1\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address1\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('address1').hasError(validation.type) &&\\n              (destinationForm.get('address1').dirty ||\\n                destinationForm.get('address1').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Address 2 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 2\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address2\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address2\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('address2').hasError(validation.type) &&\\n              (destinationForm.get('address2').dirty ||\\n                destinationForm.get('address2').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Postal Code -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Postal Code\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"postalcode\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.postalcode\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('postalcode').hasError(validation.type) &&\\n              (destinationForm.get('postalcode').dirty ||\\n                destinationForm.get('postalcode').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- City -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; City/Town\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"city\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.city\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('city').hasError(validation.type) &&\\n              (destinationForm.get('city').dirty ||\\n                destinationForm.get('city').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- State -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;State / Province</ion-label>\\n        <ion-select\\n          formControlName=\\\"state\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          [disabled]=\\\"!(destinationForm.get('country').dirty ||\\n          destinationForm.get('country').touched)\\\"\\n        >\\n          <ion-select-option\\n            *ngFor=\\\"let item of states\\\"\\n            [value]=\\\"item\\\"\\n          >\\n            {{ item }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Phone -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Phone\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"phone\\\"\\n          clearInput\\n          required\\n          placeholder=\\\"{{ destinationForm.value.country.phoneCode }}\\\"\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.phone\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('phone').hasError(validation.type) &&\\n              (destinationForm.get('phone').dirty ||\\n                destinationForm.get('phone').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Email -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Email\\n        </ion-label>\\n        <ion-input\\n          type=\\\"email\\\"\\n          formControlName=\\\"email\\\"\\n          clearInput\\n          inputmode=\\\"email\\\"\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.email\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('email').hasError(validation.type) &&\\n              (destinationForm.get('email').dirty ||\\n                destinationForm.get('email').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n    </ion-list>\\n\\n    <ion-button\\n      expand=\\\"full\\\"\\n      color=\\\"tertiary\\\"\\n      [disabled]=\\\"!destinationForm.valid\\\"\\n      (click)=\\\"next()\\\"\\n    >\\n      Continue\\n    </ion-button>\\n  </form>\\n</ion-content>\\n\"","import { CountryModel } from './../models/country-model';\r\n\r\nexport const COUNTRYLIST: CountryModel[] = [\r\n  {\r\n    iso: 'US',\r\n    name: 'United States',\r\n    states: [\r\n      'Alabama',\r\n      'Alaska',\r\n      'Arizona',\r\n      'Arkansas',\r\n      'California',\r\n      'Colorado',\r\n      'Connecticut',\r\n      'Delaware',\r\n      'District of Columbia',\r\n      'Florida',\r\n      'Georgia',\r\n      'Hawaii',\r\n      'Idaho',\r\n      'Illinois',\r\n      'Indiana',\r\n      'Iowa',\r\n      'Kansas',\r\n      'Kentucky',\r\n      'Louisiana',\r\n      'Maine',\r\n      'Maryland',\r\n      'Massachusetts',\r\n      'Michigan',\r\n      'Minnesota',\r\n      'Mississippi',\r\n      'Missouri',\r\n      'Montana',\r\n      'Nebraska',\r\n      'Nevada',\r\n      'New Hampshire',\r\n      'New Jersey',\r\n      'New Mexico',\r\n      'New York',\r\n      'North Carolina',\r\n      'North Dakota',\r\n      'Ohio',\r\n      'Oklahoma',\r\n      'Oregon',\r\n      'Pennsylvania',\r\n      'Rhode Island',\r\n      'South Carolina',\r\n      'South Dakota',\r\n      'Tennessee',\r\n      'Texas',\r\n      'Utah',\r\n      'Vermont',\r\n      'Virginia',\r\n      'Washington',\r\n      'West Virginia',\r\n      'Wisconsin',\r\n      'Wyoming'\r\n   ],\r\n   phoneCode: '+1',\r\n  },\r\n  {\r\n    iso: 'NG',\r\n    name: 'Nigeria',\r\n    states: [\r\n      'Abia',\r\n      'Abuja Federal Capital',\r\n      'Adamawa',\r\n      'Akwa Ibom',\r\n      'Anambra',\r\n      'Bauchi',\r\n      'Bayelsa',\r\n      'Benue',\r\n      'Borno',\r\n      'Cross River',\r\n      'Delta',\r\n      'Ebonyi',\r\n      'Edo',\r\n      'Ekiti',\r\n      'Enugu',\r\n      'Gombe',\r\n      'Imo',\r\n      'Jigawa',\r\n      'Kaduna',\r\n      'Kano',\r\n      'Katsina',\r\n      'Kebbi',\r\n      'Kogi',\r\n      'Kwara',\r\n      'Lagos',\r\n      'Nassarawa',\r\n      'Niger',\r\n      'Ogun',\r\n      'Ondo',\r\n      'Osun',\r\n      'Oyo',\r\n      'Plateau',\r\n      'Rivers',\r\n      'Sokoto',\r\n      'Taraba',\r\n      'Yobe',\r\n      'Zamfara'\r\n   ],\r\n   phoneCode: '+234',\r\n  },\r\n  {\r\n    iso: 'GB',\r\n    name: 'United Kingdom',\r\n    states: [ \r\n      'Aberconwy and Colwyn',\r\n      'Aberdeen City',\r\n      'Aberdeenshire',\r\n      'Anglesey',\r\n      'Angus',\r\n      'Antrim',\r\n      'Argyll and Bute',\r\n      'Armagh',\r\n      'Avon',\r\n      'Ayrshire',\r\n      'Bath and NE Somerset',\r\n      'Bedfordshire',\r\n      'Belfast',\r\n      'Berkshire',\r\n      'Berwickshire',\r\n      'BFPO',\r\n      'Blaenau Gwent',\r\n      'Buckinghamshire',\r\n      'Caernarfonshire',\r\n      'Caerphilly',\r\n      'Caithness',\r\n      'Cambridgeshire',\r\n      'Cardiff',\r\n      'Cardiganshire',\r\n      'Carmarthenshire',\r\n      'Ceredigion',\r\n      'Channel Islands',\r\n      'Cheshire',\r\n      'City of Bristol',\r\n      'Clackmannanshire',\r\n      'Clwyd',\r\n      'Conwy',\r\n      'Cornwall/Scilly',\r\n      'Cumbria',\r\n      'Denbighshire',\r\n      'Derbyshire',\r\n      'Derry/Londonderry',\r\n      'Devon',\r\n      'Dorset',\r\n      'Down',\r\n      'Dumfries and Galloway',\r\n      'Dunbartonshire',\r\n      'Dundee',\r\n      'Durham',\r\n      'Dyfed',\r\n      'East Ayrshire',\r\n      'East Dunbartonshire',\r\n      'East Lothian',\r\n      'East Renfrewshire',\r\n      'East Riding Yorkshire',\r\n      'East Sussex',\r\n      'Edinburgh',\r\n      'England',\r\n      'Essex',\r\n      'Falkirk',\r\n      'Fermanagh',\r\n      'Fife',\r\n      'Flintshire',\r\n      'Glasgow',\r\n      'Gloucestershire',\r\n      'Greater London',\r\n      'Greater Manchester',\r\n      'Gwent',\r\n      'Gwynedd',\r\n      'Hampshire',\r\n      'Hartlepool',\r\n      'Hereford and Worcester',\r\n      'Hertfordshire',\r\n      'Highlands',\r\n      'Inverclyde',\r\n      'Inverness-Shire',\r\n      'Isle of Man',\r\n      'Isle of Wight',\r\n      'Kent',\r\n      'Kincardinshire',\r\n      'Kingston Upon Hull',\r\n      'Kinross-Shire',\r\n      'Kirklees',\r\n      'Lanarkshire',\r\n      'Lancashire',\r\n      'Leicestershire',\r\n      'Lincolnshire',\r\n      'Londonderry',\r\n      'Merseyside',\r\n      'Merthyr Tydfil',\r\n      'Mid Glamorgan',\r\n      'Mid Lothian',\r\n      'Middlesex',\r\n      'Monmouthshire',\r\n      'Moray',\r\n      'Neath & Port Talbot',\r\n      'Newport',\r\n      'Norfolk',\r\n      'North Ayrshire',\r\n      'North East Lincolnshire',\r\n      'North Lanarkshire',\r\n      'North Lincolnshire',\r\n      'North Somerset',\r\n      'North Yorkshire',\r\n      'Northamptonshire',\r\n      'Northern Ireland',\r\n      'Northumberland',\r\n      'Nottinghamshire',\r\n      'Orkney and Shetland Isles',\r\n      'Oxfordshire',\r\n      'Pembrokeshire',\r\n      'Perth and Kinross',\r\n      'Powys',\r\n      'Redcar and Cleveland',\r\n      'Renfrewshire',\r\n      'Rhonda Cynon Taff',\r\n      'Rutland',\r\n      'Scottish Borders',\r\n      'Shetland',\r\n      'Shropshire',\r\n      'Somerset',\r\n      'South Ayrshire',\r\n      'South Glamorgan',\r\n      'South Gloucesteshire',\r\n      'South Lanarkshire',\r\n      'South Yorkshire',\r\n      'Staffordshire',\r\n      'Stirling',\r\n      'Stockton On Tees',\r\n      'Suffolk',\r\n      'Surrey',\r\n      'Swansea',\r\n      'Torfaen',\r\n      'Tyne and Wear',\r\n      'Tyrone',\r\n      'Vale Of Glamorgan',\r\n      'Wales',\r\n      'Warwickshire',\r\n      'West Berkshire',\r\n      'West Dunbartonshire',\r\n      'West Glamorgan',\r\n      'West Lothian',\r\n      'West Midlands',\r\n      'West Sussex',\r\n      'West Yorkshire',\r\n      'Western Isles',\r\n      'Wiltshire',\r\n      'Wirral',\r\n      'Worcestershire',\r\n      'Wrexham',\r\n      'York'\r\n   ],\r\n   phoneCode: '+44',\r\n  },\r\n  {\r\n    iso: 'GH',\r\n    name: 'Ghana',\r\n    states:\r\n    [\r\n       'Ashanti',\r\n       'Brong-Ahafo',\r\n       'Central',\r\n       'Eastern',\r\n       'Greater Accra',\r\n       'Northern',\r\n       'Upper East',\r\n       'Upper West',\r\n       'Volta',\r\n       'Western'\r\n    ],\r\n   phoneCode: '+233',\r\n  },\r\n  {\r\n    iso: 'CA',\r\n    name: 'Canada',\r\n    states: [\r\n      'Alberta',\r\n      'British Columbia',\r\n      'Manitoba',\r\n      'New Brunswick',\r\n      'Newfoundland and Labrador',\r\n      'Northwest Territories',\r\n      'Nova Scotia',\r\n      'Nunavut',\r\n      'Ontario',\r\n      'Prince Edward Island',\r\n      'Quebec',\r\n      'Saskatchewan',\r\n      'Yukon Territory'\r\n   ],\r\n   phoneCode: '+1',\r\n  }\r\n];\r\n","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { ShippingFormPage } from './shipping-form.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ShippingFormPage\n  }\n];\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ShippingFormPage]\n})\nexport class ShippingFormPageModule {}\n","export default \".inputs-list {\\n  --ion-item-background: var(--page-background);\\n  padding: var(--page-margin) var(--page-margin) calc(var(--page-margin) * 2);\\n}\\n.inputs-list ion-list-header {\\n  -webkit-padding-start: 0px;\\n          padding-inline-start: 0px;\\n}\\n.inputs-list ion-list-header .header-title {\\n  text-transform: uppercase;\\n  font-size: 16px;\\n  color: var(--ion-color-secondary);\\n}\\n.inputs-list .input-item {\\n  --padding-start: 0px;\\n  --padding-end: 0px;\\n  --inner-padding-end: 0px;\\n}\\n.inputs-list .error-container .error-message {\\n  margin: calc(var(--page-margin) / 2) 0px;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  color: var(--ion-color-danger);\\n  font-size: 14px;\\n}\\n.inputs-list .error-container .error-message ion-icon {\\n  -webkit-padding-end: calc(var(--page-margin) / 2);\\n          padding-inline-end: calc(var(--page-margin) / 2);\\n  flex-shrink: 0;\\n}\\n.ng-valid[required], .ng-valid.required, .ng-invalid[required], .ng-invalid.required {\\n  border-left: 2px solid #7951ff;\\n}\\n.form-animate {\\n  -webkit-transition: all 0.3s ease-out;\\n  transition: all 0.3s ease-out;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvc2hpcHBpbmcvc2hpcHBpbmctZm9ybS9DOlxcVXNlcnNcXHZhZGV5ZW1pXFxEb2N1bWVudHNcXGdvYXZpbmNlXFx1cmFuc2UtbW9iaWxlL3NyY1xcYXBwXFxwYWdlc1xcc2hpcHBpbmdcXHNoaXBwaW5nLWZvcm1cXHNoaXBwaW5nLWZvcm0ucGFnZS5zY3NzIiwic3JjL2FwcC9wYWdlcy9zaGlwcGluZy9zaGlwcGluZy1mb3JtL3NoaXBwaW5nLWZvcm0ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsNkNBQUE7RUFFQSwyRUFBQTtBQ0FGO0FERUU7RUFDRSwwQkFBQTtVQUFBLHlCQUFBO0FDQUo7QURFSTtFQUNFLHlCQUFBO0VBQ0EsZUFBQTtFQUNBLGlDQUFBO0FDQU47QURJRTtFQUNFLG9CQUFBO0VBQ0Esa0JBQUE7RUFDQSx3QkFBQTtBQ0ZKO0FETUU7RUFDRSx3Q0FBQTtFQUNBLG9CQUFBO0VBQUEsYUFBQTtFQUNBLHlCQUFBO1VBQUEsbUJBQUE7RUFDQSw4QkFBQTtFQUNBLGVBQUE7QUNKSjtBRE1JO0VBQ0UsaURBQUE7VUFBQSxnREFBQTtFQUNBLGNBQUE7QUNKTjtBRFVBO0VBQ0UsOEJBQUE7QUNQRjtBRFNBO0VBQ0UscUNBQUE7RUFBQSw2QkFBQTtBQ05GIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvc2hpcHBpbmcvc2hpcHBpbmctZm9ybS9zaGlwcGluZy1mb3JtLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbnB1dHMtbGlzdCB7XHJcbiAgLS1pb24taXRlbS1iYWNrZ3JvdW5kOiB2YXIoLS1wYWdlLWJhY2tncm91bmQpO1xyXG5cclxuICBwYWRkaW5nOiB2YXIoLS1wYWdlLW1hcmdpbikgdmFyKC0tcGFnZS1tYXJnaW4pIGNhbGModmFyKC0tcGFnZS1tYXJnaW4pICogMik7XHJcblxyXG4gIGlvbi1saXN0LWhlYWRlciB7XHJcbiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xyXG5cclxuICAgIC5oZWFkZXItdGl0bGUge1xyXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgIGNvbG9yOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5pbnB1dC1pdGVtIHtcclxuICAgIC0tcGFkZGluZy1zdGFydDogMHB4O1xyXG4gICAgLS1wYWRkaW5nLWVuZDogMHB4O1xyXG4gICAgLS1pbm5lci1wYWRkaW5nLWVuZDogMHB4O1xyXG4gIH1cclxuXHJcbi5lcnJvci1jb250YWluZXIge1xyXG4gIC5lcnJvci1tZXNzYWdlIHtcclxuICAgIG1hcmdpbjogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKSAwcHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItZGFuZ2VyKTtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuXHJcbiAgICBpb24taWNvbiB7XHJcbiAgICAgIHBhZGRpbmctaW5saW5lLWVuZDogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKTtcclxuICAgICAgZmxleC1zaHJpbms6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbn1cclxuXHJcbi5uZy12YWxpZFtyZXF1aXJlZF0sIC5uZy12YWxpZC5yZXF1aXJlZCwgLm5nLWludmFsaWRbcmVxdWlyZWRdLCAubmctaW52YWxpZC5yZXF1aXJlZCAge1xyXG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzc5NTFmZjtcclxufVxyXG4uZm9ybS1hbmltYXRle1xyXG4gIHRyYW5zaXRpb246IGFsbCAuM3MgZWFzZS1vdXQ7XHJcbn0iLCIuaW5wdXRzLWxpc3Qge1xuICAtLWlvbi1pdGVtLWJhY2tncm91bmQ6IHZhcigtLXBhZ2UtYmFja2dyb3VuZCk7XG4gIHBhZGRpbmc6IHZhcigtLXBhZ2UtbWFyZ2luKSB2YXIoLS1wYWdlLW1hcmdpbikgY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgKiAyKTtcbn1cbi5pbnB1dHMtbGlzdCBpb24tbGlzdC1oZWFkZXIge1xuICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xufVxuLmlucHV0cy1saXN0IGlvbi1saXN0LWhlYWRlciAuaGVhZGVyLXRpdGxlIHtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXNlY29uZGFyeSk7XG59XG4uaW5wdXRzLWxpc3QgLmlucHV0LWl0ZW0ge1xuICAtLXBhZGRpbmctc3RhcnQ6IDBweDtcbiAgLS1wYWRkaW5nLWVuZDogMHB4O1xuICAtLWlubmVyLXBhZGRpbmctZW5kOiAwcHg7XG59XG4uaW5wdXRzLWxpc3QgLmVycm9yLWNvbnRhaW5lciAuZXJyb3ItbWVzc2FnZSB7XG4gIG1hcmdpbjogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKSAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3ItZGFuZ2VyKTtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuLmlucHV0cy1saXN0IC5lcnJvci1jb250YWluZXIgLmVycm9yLW1lc3NhZ2UgaW9uLWljb24ge1xuICBwYWRkaW5nLWlubGluZS1lbmQ6IGNhbGModmFyKC0tcGFnZS1tYXJnaW4pIC8gMik7XG4gIGZsZXgtc2hyaW5rOiAwO1xufVxuXG4ubmctdmFsaWRbcmVxdWlyZWRdLCAubmctdmFsaWQucmVxdWlyZWQsIC5uZy1pbnZhbGlkW3JlcXVpcmVkXSwgLm5nLWludmFsaWQucmVxdWlyZWQge1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICM3OTUxZmY7XG59XG5cbi5mb3JtLWFuaW1hdGUge1xuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLW91dDtcbn0iXX0= */\"","import { SpinnerService } from './../../../services/spinner.service';\nimport { AlertService } from './../../../services/alert.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {COUNTRYLIST} from './../../../config/countries';\n\n\n@Component({\n  selector: 'app-shipping-form',\n  templateUrl: './shipping-form.page.html',\n  styleUrls: ['./shipping-form.page.scss'],\n})\nexport class ShippingFormPage implements OnInit {\n  senderForm: FormGroup;\n  destinationForm: FormGroup;\n  countries = [];\n  states = [];\n  step = 1;\n  totalStep = 4;\n  progressValue = this.step / this.totalStep;\n\n  validations = {\n    'name': [\n      { type: 'required', message: 'Name is required.' },\n    ],\n    'businessname': [\n      { type: 'minlength', message: 'Business name must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Business name cannot be more than 50 characters long.' },\n    ],\n    'address1': [\n      { type: 'required', message: 'Address is required.' },\n      { type: 'minlength', message: 'Address must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 50 characters long.' },\n    ],\n    'address2': [\n      { type: 'minlength', message: 'Address must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 50 characters long.' },\n    ],\n    'postalcode': [\n      { type: 'minlength', message: 'Address must be at least 3 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 6 characters long.' },\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'pattern', message: 'Enter a valid phone number.' }\n    ],\n    'city': [\n      { type: 'required', message: 'City is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n  };\n  constructor(private router: Router, private alert: AlertService, private spinner: SpinnerService) { }\n\n  ionViewWillEnter() {\n   this.spinner.presentLoading();\n  }\n  ionViewDidEnter() {\n   this.spinner.dismiss();\n  }\n\n  ngOnInit(): void {\n    this.countries = COUNTRYLIST;\n    this.states = COUNTRYLIST[0].states;\n\n    this.senderForm = new FormGroup({\n      'name': new FormControl('', Validators.required),\n      'businessname': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'country': new FormControl(this.countries[0], Validators.required),\n      'address1': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5),\n        Validators.required\n      ])),\n      'address2': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'postalcode': new FormControl('', Validators.compose([\n        Validators.maxLength(6),\n        Validators.minLength(3)\n      ])),\n      'city': new FormControl('', Validators.required),\n      'state': new FormControl(this.countries[0].states[0], Validators.required),\n      'phone': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^\\\\+[1-9]\\\\d{1,14}$')\n      ])),\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.email,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n    });\n\n    this.destinationForm = new FormGroup({\n      'name': new FormControl('', Validators.required),\n      'businessname': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'country': new FormControl(this.countries[0], Validators.required),\n      'address1': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5),\n        Validators.required\n      ])),\n      'address2': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'postalcode': new FormControl('', Validators.compose([\n        Validators.maxLength(6),\n        Validators.minLength(3)\n      ])),\n      'city': new FormControl('', Validators.required),\n      'state': new FormControl(this.countries[0].states[0], Validators.required),\n      'phone': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^\\\\+[1-9]\\\\d{1,14}$')\n      ])),\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n    });\n  }\n  onCountryChange(e) {\n    this.states = e.target.value.states;\n  };\n\n  next() {\n    this.spinner.presentLoading();\n    this.step += 1;\n    this.spinner.dismiss();\n    this.progressValue = this.step / this.totalStep;\n  }\n\n  prev() {\n    this.spinner.presentLoading();\n    if (this.step === 1) {\n      this.router.navigate(['home/ship']);\n      this.senderForm.reset();\n      this.destinationForm.reset();\n      this.spinner.dismiss();\n    } else {\n      this.step -= 1;\n      this.spinner.dismiss();\n      this.progressValue = this.step / this.totalStep;\n    }\n  }\n  navigateHome() {\n    this.router.navigate(['/home']);\n    this.senderForm.reset();\n    this.destinationForm.reset();\n  }\n}\n"],"sourceRoot":"webpack:///"}