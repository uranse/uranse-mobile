{"version":3,"sources":["./src/app/pages/shipping/shipping-form/shipping-form.page.html","./src/app/config/countries.ts","./src/app/pages/shipping/shipping-form/shipping-form.module.ts","./src/app/pages/shipping/shipping-form/shipping-form.page.scss","./src/app/pages/shipping/shipping-form/shipping-form.page.ts"],"names":[],"mappings":"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","file":"pages-shipping-shipping-form-shipping-form-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"prev()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title>\\n      <img\\n        class=\\\"headerlogog\\\"\\n        alt=\\\"Uranse\\\"\\n        src=\\\"/assets/images/uranselogo-white.png\\\"\\n      />\\n    </ion-title>\\n    <ion-buttons slot=\\\"primary\\\">\\n      <ion-button (click)=\\\"navigateHome()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"home\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-progress-bar\\n      color=\\\"success\\\"\\n      value=\\\"{{ progressValue }}\\\"\\n    ></ion-progress-bar>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <ion-list>\\n  <ion-list-header class=\\\"header\\\" *ngIf=\\\"step == 0\\\"><ion-label><b>Where are you shipping from?</b></ion-label></ion-list-header>\\n  <ion-list-header class=\\\"header\\\" *ngIf=\\\"step == 1\\\"><ion-label><b>Where is this shipment going?</b></ion-label></ion-list-header>\\n  <ion-list-header class=\\\"header\\\" *ngIf=\\\"step == 2\\\"><ion-label><b>What kind of packaging are you using?</b></ion-label></ion-list-header>\\n  <ng-container *ngIf=\\\"step == 0\\\">\\n  <form [formGroup]=\\\"senderForm\\\" autocomplete=\\\"on\\\" autocapitalize=\\\"words\\\" *ngIf=\\\"step == 0\\\" class=\\\"ion-padding\\\">\\n    <ion-list class=\\\"inputs-list\\\" lines=\\\"full\\\">\\n      <!-- Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n         &nbsp; Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"name\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.name\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('name').hasError(validation.type) &&\\n              (senderForm.get('name').dirty || senderForm.get('name').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!--Business Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Business Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"businessname\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.businessname\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('businessname').hasError(validation.type) &&\\n              (senderForm.get('businessname').dirty ||\\n                senderForm.get('businessname').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Country -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">Country</ion-label>\\n        <ion-select\\n          formControlName=\\\"country\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          (ionChange)=\\\"onCountryChange($event)\\\"\\n        >\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\" >\\n            {{ item.name }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!--Address 1 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 1\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address1\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address1\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('address1').hasError(validation.type) &&\\n              (senderForm.get('address1').dirty ||\\n                senderForm.get('address1').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Address 2 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 2\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address2\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address2\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('address2').hasError(validation.type) &&\\n              (senderForm.get('address2').dirty ||\\n                senderForm.get('address2').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Postal code -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Postal Code\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"postalcode\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.postalcode\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('postalcode').hasError(validation.type) &&\\n              (senderForm.get('postalcode').dirty ||\\n                senderForm.get('postalcode').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- City / town -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; City/Town\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"city\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.city\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('city').hasError(validation.type) &&\\n              (senderForm.get('city').dirty || senderForm.get('city').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- State -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;State / Province</ion-label>\\n        <ion-select\\n          formControlName=\\\"state\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          [disabled]=\\\"!(senderForm.get('country').dirty ||\\n          senderForm.get('country').touched)\\\"\\n        >\\n          <ion-select-option\\n            *ngFor=\\\"let item of states\\\"\\n            [value]=\\\"item\\\"\\n          >\\n            {{ item }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Phone -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Phone\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"phone\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.phone\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('phone').hasError(validation.type) &&\\n              (senderForm.get('phone').dirty || senderForm.get('phone').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Email -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Email\\n        </ion-label>\\n        <ion-input\\n          type=\\\"email\\\"\\n          formControlName=\\\"email\\\"\\n          clearInput\\n          inputmode=\\\"email\\\"\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.email\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              senderForm.get('email').hasError(validation.type) &&\\n              (senderForm.get('email').dirty || senderForm.get('email').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n    </ion-list>\\n    <ion-button\\n      expand=\\\"full\\\"\\n      color=\\\"tertiary\\\"\\n      [disabled]=\\\"!senderForm.valid\\\"\\n      (click)=\\\"next()\\\"\\n    >\\n      Continue\\n    </ion-button>\\n  </form>\\n  </ng-container>\\n  <ng-container *ngIf=\\\"step == 1\\\">\\n  <form [formGroup]=\\\"destinationForm\\\" autocomplete=\\\"on\\\" autocapitalize=\\\"words\\\" *ngIf=\\\"step == 1\\\" class=\\\"ion-padding form-animate\\\">\\n    <ion-list class=\\\"inputs-list\\\" lines=\\\"full\\\">\\n      <!-- Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"name\\\"\\n          clearInput\\n          required\\n          autocapitalize=\\\"true\\\"\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.name\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('name').hasError(validation.type) &&\\n              (destinationForm.get('name').dirty ||\\n                destinationForm.get('name').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!--Business Name -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Business Name\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"businessname\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.businessname\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('businessname').hasError(validation.type) &&\\n              (destinationForm.get('businessname').dirty ||\\n                destinationForm.get('businessname').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Country -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;Country</ion-label>\\n        <ion-select\\n          formControlName=\\\"country\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          (ionChange)=\\\"onCountryChange($event)\\\"\\n        >\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">\\n            {{ item.name }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Address 1 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 1\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address1\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address1\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('address1').hasError(validation.type) &&\\n              (destinationForm.get('address1').dirty ||\\n                destinationForm.get('address1').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Address 2 -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Address 2\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"address2\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.address2\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('address2').hasError(validation.type) &&\\n              (destinationForm.get('address2').dirty ||\\n                destinationForm.get('address2').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Postal Code -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Postal Code\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"postalcode\\\"\\n          clearInput\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.postalcode\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('postalcode').hasError(validation.type) &&\\n              (destinationForm.get('postalcode').dirty ||\\n                destinationForm.get('postalcode').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- City -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; City/Town\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"city\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.city\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('city').hasError(validation.type) &&\\n              (destinationForm.get('city').dirty ||\\n                destinationForm.get('city').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- State -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">&nbsp;State / Province</ion-label>\\n        <ion-select\\n          formControlName=\\\"state\\\"\\n          cancelText=\\\"Cancel\\\"\\n          okText=\\\"OK\\\"\\n          required\\n          [disabled]=\\\"!(destinationForm.get('country').dirty ||\\n          destinationForm.get('country').touched)\\\"\\n        >\\n          <ion-select-option\\n            *ngFor=\\\"let item of states\\\"\\n            [value]=\\\"item\\\"\\n          >\\n            {{ item }}\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <!-- Phone -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Phone\\n        </ion-label>\\n        <ion-input\\n          type=\\\"text\\\"\\n          formControlName=\\\"phone\\\"\\n          clearInput\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.phone\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('phone').hasError(validation.type) &&\\n              (destinationForm.get('phone').dirty ||\\n                destinationForm.get('phone').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n      <!-- Email -->\\n      <ion-item class=\\\"input-item\\\">\\n        <ion-label position=\\\"floating\\\">\\n          &nbsp; Email\\n        </ion-label>\\n        <ion-input\\n          type=\\\"email\\\"\\n          formControlName=\\\"email\\\"\\n          clearInput\\n          inputmode=\\\"email\\\"\\n          required\\n        ></ion-input>\\n      </ion-item>\\n      <div class=\\\"error-container\\\">\\n        <ng-container *ngFor=\\\"let validation of validations.email\\\">\\n          <div\\n            class=\\\"error-message\\\"\\n            *ngIf=\\\"\\n              destinationForm.get('email').hasError(validation.type) &&\\n              (destinationForm.get('email').dirty ||\\n                destinationForm.get('email').touched)\\n            \\\"\\n          >\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n            <span>{{ validation.message }}</span>\\n          </div>\\n        </ng-container>\\n      </div>\\n    </ion-list>\\n\\n    <ion-button\\n      expand=\\\"full\\\"\\n      color=\\\"tertiary\\\"\\n      [disabled]=\\\"!destinationForm.valid\\\"\\n      (click)=\\\"next()\\\"\\n    >\\n      Continue\\n    </ion-button>\\n  </form>\\n  </ng-container>\\n  <ng-container *ngIf=\\\"step == 2\\\">\\n    <form [formGroup]=\\\"packageForm\\\" class=\\\"ion-padding form-animate\\\" >\\n      <ion-list class=\\\"inputs-list\\\" lines=\\\"full\\\">\\n        <!--Weight-->\\n        <ion-item lines=\\\"none\\\"  class=\\\"input-item\\\">\\n          <ion-item class=\\\"input-item\\\" slot=\\\"start\\\">\\n            <ion-label position=\\\"floating\\\">&nbsp;Weight</ion-label>\\n            <ion-input\\n            formControlName=\\\"weight\\\"\\n            type=\\\"text\\\"\\n            clearInput\\n            required\\n            ></ion-input>\\n          </ion-item>\\n          <ion-item slot=\\\"end\\\" class=\\\"input-item\\\"> \\n            <ion-label position=\\\"floating\\\">&nbsp;Unit</ion-label>\\n            <ion-select>\\n              <ion-select-option selected [value]=\\\"lbs\\\">lbs</ion-select-option>\\n              <ion-select-option [value]=\\\"kg\\\">Kg</ion-select-option>\\n            </ion-select>\\n          </ion-item>\\n        </ion-item>\\n        <div class=\\\"error-container\\\">\\n          <ng-container *ngFor=\\\"let validation of validations.weight\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"packageForm.get('weight').hasError(validation.type) && (packageForm.get('weight').dirty || packageForm.get('weight').touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              <span>{{ validation.message }}</span>\\n            </div>\\n          </ng-container>\\n        </div>\\n        <!--Dimensions-->\\n        <ion-item lines=\\\"none\\\" class=\\\"input-item\\\">\\n          <!--Length-->\\n          <ion-item class=\\\"input-item\\\">\\n            <ion-label position=\\\"floating\\\">&nbsp;Length</ion-label>\\n            <ion-input\\n            formControlName=\\\"length\\\"\\n            type=\\\"text\\\"\\n            clearInput\\n            required\\n            ></ion-input>\\n          </ion-item>\\n          <!--Width-->\\n          <ion-item class=\\\"input-item\\\">\\n            <ion-label position=\\\"floating\\\">&nbsp;Width</ion-label>\\n            <ion-input\\n            formControlName=\\\"width\\\"\\n            type=\\\"text\\\"\\n            clearInput\\n            required\\n            ></ion-input>\\n          </ion-item>\\n          <!--Height-->\\n          <ion-item class=\\\"input-item\\\">\\n            <ion-label position=\\\"floating\\\">&nbsp;Height</ion-label>\\n            <ion-input\\n            formControlName=\\\"height\\\"\\n            type=\\\"text\\\"\\n            clearInput\\n            required\\n            ></ion-input>\\n          </ion-item>\\n          <!--Unit-->\\n          <ion-item slot=\\\"end\\\" class=\\\"input-item\\\"> \\n            <ion-label position=\\\"floating\\\">&nbsp;Unit</ion-label>\\n            <ion-select>\\n              <ion-select-option selected [value]=\\\"in\\\">in</ion-select-option>\\n              <ion-select-option [value]=\\\"cm\\\">cm</ion-select-option>\\n            </ion-select>\\n          </ion-item>\\n        </ion-item>\\n        <ng-container>\\n          <div class=\\\"error-container\\\">\\n            <ng-container *ngFor=\\\"let validation of validations.length\\\">\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"packageForm.get('length').hasError(validation.type) && (packageForm.get('length').dirty || packageForm.get('length').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                <span>{{ validation.message }}</span>\\n              </div>\\n            </ng-container>\\n          </div>\\n          <div class=\\\"error-container\\\">\\n            <ng-container *ngFor=\\\"let validation of validations.width\\\">\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"packageForm.get('width').hasError(validation.type) && (packageForm.get('width').dirty || packageForm.get('width').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                <span>{{ validation.message }}</span>\\n              </div>\\n            </ng-container>\\n          </div>\\n          <div class=\\\"error-container\\\">\\n            <ng-container *ngFor=\\\"let validation of validations.height\\\">\\n              <div\\n                class=\\\"error-message\\\"\\n                *ngIf=\\\"packageForm.get('height').hasError(validation.type) && (packageForm.get('height').dirty || packageForm.get('height').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n                <span>{{ validation.message }}</span>\\n              </div>\\n            </ng-container>\\n          </div>\\n        </ng-container>\\n        <!--Package description-->\\n        <ion-item class=\\\"input-item\\\">\\n          <ion-label  position=\\\"floating\\\">&nbsp;Description</ion-label>\\n          <ion-textarea \\n          formControlName=\\\"description\\\"\\n          clearInput\\n          auto-grow=\\\"true\\\"\\n          autocapitalize=\\\"on\\\"\\n          placeholder=\\\"Please describe what you are shipping\\\"></ion-textarea>\\n        </ion-item>\\n        <div class=\\\"error-container\\\">\\n          <ng-container *ngFor=\\\"let validation of validations.description\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"packageForm.get('value').hasError(validation.type) && (packageForm.get('value').dirty || packageForm.get('value').touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              <span>{{ validation.message }}</span>\\n            </div>\\n          </ng-container>\\n        </div>\\n        <!--Declared value-->\\n        <ion-item class=\\\"input-item\\\">\\n          <ion-label  position=\\\"floating\\\">&nbsp;Declared Value</ion-label>\\n          <ion-input autocomplete=\\\"on\\\" formControlName=\\\"value\\\" type=\\\"text\\\" clearInput ></ion-input>\\n        </ion-item>\\n        <div class=\\\"error-container\\\">\\n          <ng-container *ngFor=\\\"let validation of validations.value\\\">\\n            <div\\n              class=\\\"error-message\\\"\\n              *ngIf=\\\"packageForm.get('value').hasError(validation.type) && (packageForm.get('value').dirty || packageForm.get('value').touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon>\\n              <span>{{ validation.message }}</span>\\n            </div>\\n          </ng-container>\\n        </div>\\n        <ion-item lines=\\\"none\\\" class=\\\"input-item\\\"> \\n          <ion-label>Include lithium batteries</ion-label>\\n          <ion-toggle formControlName=\\\"isHazardous\\\"></ion-toggle>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"input-item\\\"> \\n          <ion-label>Require signature</ion-label>\\n          <ion-toggle formControlName=\\\"requireSignature\\\"></ion-toggle>\\n        </ion-item>\\n      </ion-list>\\n      <ion-button\\n      expand=\\\"full\\\"\\n      color=\\\"tertiary\\\"\\n      [disabled]=\\\"!packageForm.valid\\\"\\n      (click)=\\\"next()\\\"\\n    >\\n      Continue\\n    </ion-button>\\n    </form>\\n  </ng-container>\\n</ion-list>\\n</ion-content>\\n\"","import { CountryModel } from './../models/country-model';\n\nexport const COUNTRYLIST: CountryModel[] = [\n  {\n    iso: 'US',\n    name: 'United States',\n    states: [\n      'Alabama',\n      'Alaska',\n      'Arizona',\n      'Arkansas',\n      'California',\n      'Colorado',\n      'Connecticut',\n      'Delaware',\n      'District of Columbia',\n      'Florida',\n      'Georgia',\n      'Hawaii',\n      'Idaho',\n      'Illinois',\n      'Indiana',\n      'Iowa',\n      'Kansas',\n      'Kentucky',\n      'Louisiana',\n      'Maine',\n      'Maryland',\n      'Massachusetts',\n      'Michigan',\n      'Minnesota',\n      'Mississippi',\n      'Missouri',\n      'Montana',\n      'Nebraska',\n      'Nevada',\n      'New Hampshire',\n      'New Jersey',\n      'New Mexico',\n      'New York',\n      'North Carolina',\n      'North Dakota',\n      'Ohio',\n      'Oklahoma',\n      'Oregon',\n      'Pennsylvania',\n      'Rhode Island',\n      'South Carolina',\n      'South Dakota',\n      'Tennessee',\n      'Texas',\n      'Utah',\n      'Vermont',\n      'Virginia',\n      'Washington',\n      'West Virginia',\n      'Wisconsin',\n      'Wyoming'\n   ],\n   phoneCode: '+1',\n  },\n  {\n    iso: 'NG',\n    name: 'Nigeria',\n    states: [\n      'Abia',\n      'Abuja Federal Capital',\n      'Adamawa',\n      'Akwa Ibom',\n      'Anambra',\n      'Bauchi',\n      'Bayelsa',\n      'Benue',\n      'Borno',\n      'Cross River',\n      'Delta',\n      'Ebonyi',\n      'Edo',\n      'Ekiti',\n      'Enugu',\n      'Gombe',\n      'Imo',\n      'Jigawa',\n      'Kaduna',\n      'Kano',\n      'Katsina',\n      'Kebbi',\n      'Kogi',\n      'Kwara',\n      'Lagos',\n      'Nassarawa',\n      'Niger',\n      'Ogun',\n      'Ondo',\n      'Osun',\n      'Oyo',\n      'Plateau',\n      'Rivers',\n      'Sokoto',\n      'Taraba',\n      'Yobe',\n      'Zamfara'\n   ],\n   phoneCode: '+234',\n  },\n  {\n    iso: 'GB',\n    name: 'United Kingdom',\n    states: [ \n      'Aberconwy and Colwyn',\n      'Aberdeen City',\n      'Aberdeenshire',\n      'Anglesey',\n      'Angus',\n      'Antrim',\n      'Argyll and Bute',\n      'Armagh',\n      'Avon',\n      'Ayrshire',\n      'Bath and NE Somerset',\n      'Bedfordshire',\n      'Belfast',\n      'Berkshire',\n      'Berwickshire',\n      'BFPO',\n      'Blaenau Gwent',\n      'Buckinghamshire',\n      'Caernarfonshire',\n      'Caerphilly',\n      'Caithness',\n      'Cambridgeshire',\n      'Cardiff',\n      'Cardiganshire',\n      'Carmarthenshire',\n      'Ceredigion',\n      'Channel Islands',\n      'Cheshire',\n      'City of Bristol',\n      'Clackmannanshire',\n      'Clwyd',\n      'Conwy',\n      'Cornwall/Scilly',\n      'Cumbria',\n      'Denbighshire',\n      'Derbyshire',\n      'Derry/Londonderry',\n      'Devon',\n      'Dorset',\n      'Down',\n      'Dumfries and Galloway',\n      'Dunbartonshire',\n      'Dundee',\n      'Durham',\n      'Dyfed',\n      'East Ayrshire',\n      'East Dunbartonshire',\n      'East Lothian',\n      'East Renfrewshire',\n      'East Riding Yorkshire',\n      'East Sussex',\n      'Edinburgh',\n      'England',\n      'Essex',\n      'Falkirk',\n      'Fermanagh',\n      'Fife',\n      'Flintshire',\n      'Glasgow',\n      'Gloucestershire',\n      'Greater London',\n      'Greater Manchester',\n      'Gwent',\n      'Gwynedd',\n      'Hampshire',\n      'Hartlepool',\n      'Hereford and Worcester',\n      'Hertfordshire',\n      'Highlands',\n      'Inverclyde',\n      'Inverness-Shire',\n      'Isle of Man',\n      'Isle of Wight',\n      'Kent',\n      'Kincardinshire',\n      'Kingston Upon Hull',\n      'Kinross-Shire',\n      'Kirklees',\n      'Lanarkshire',\n      'Lancashire',\n      'Leicestershire',\n      'Lincolnshire',\n      'Londonderry',\n      'Merseyside',\n      'Merthyr Tydfil',\n      'Mid Glamorgan',\n      'Mid Lothian',\n      'Middlesex',\n      'Monmouthshire',\n      'Moray',\n      'Neath & Port Talbot',\n      'Newport',\n      'Norfolk',\n      'North Ayrshire',\n      'North East Lincolnshire',\n      'North Lanarkshire',\n      'North Lincolnshire',\n      'North Somerset',\n      'North Yorkshire',\n      'Northamptonshire',\n      'Northern Ireland',\n      'Northumberland',\n      'Nottinghamshire',\n      'Orkney and Shetland Isles',\n      'Oxfordshire',\n      'Pembrokeshire',\n      'Perth and Kinross',\n      'Powys',\n      'Redcar and Cleveland',\n      'Renfrewshire',\n      'Rhonda Cynon Taff',\n      'Rutland',\n      'Scottish Borders',\n      'Shetland',\n      'Shropshire',\n      'Somerset',\n      'South Ayrshire',\n      'South Glamorgan',\n      'South Gloucesteshire',\n      'South Lanarkshire',\n      'South Yorkshire',\n      'Staffordshire',\n      'Stirling',\n      'Stockton On Tees',\n      'Suffolk',\n      'Surrey',\n      'Swansea',\n      'Torfaen',\n      'Tyne and Wear',\n      'Tyrone',\n      'Vale Of Glamorgan',\n      'Wales',\n      'Warwickshire',\n      'West Berkshire',\n      'West Dunbartonshire',\n      'West Glamorgan',\n      'West Lothian',\n      'West Midlands',\n      'West Sussex',\n      'West Yorkshire',\n      'Western Isles',\n      'Wiltshire',\n      'Wirral',\n      'Worcestershire',\n      'Wrexham',\n      'York'\n   ],\n   phoneCode: '+44',\n  },\n  {\n    iso: 'GH',\n    name: 'Ghana',\n    states:\n    [\n       'Ashanti',\n       'Brong-Ahafo',\n       'Central',\n       'Eastern',\n       'Greater Accra',\n       'Northern',\n       'Upper East',\n       'Upper West',\n       'Volta',\n       'Western'\n    ],\n   phoneCode: '+233',\n  },\n  {\n    iso: 'CA',\n    name: 'Canada',\n    states: [\n      'Alberta',\n      'British Columbia',\n      'Manitoba',\n      'New Brunswick',\n      'Newfoundland and Labrador',\n      'Northwest Territories',\n      'Nova Scotia',\n      'Nunavut',\n      'Ontario',\n      'Prince Edward Island',\n      'Quebec',\n      'Saskatchewan',\n      'Yukon Territory'\n   ],\n   phoneCode: '+1',\n  }\n];\n","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { ShippingFormPage } from './shipping-form.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ShippingFormPage\n  }\n];\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ShippingFormPage]\n})\nexport class ShippingFormPageModule {}\n","export default \".inputs-list {\\n  --ion-item-background: var(--page-background);\\n  padding: var(--page-margin) var(--page-margin) calc(var(--page-margin) * 2);\\n}\\n.inputs-list ion-list-header {\\n  -webkit-padding-start: 0px;\\n          padding-inline-start: 0px;\\n}\\n.inputs-list ion-list-header .header-title {\\n  text-transform: uppercase;\\n  font-size: 16px;\\n  color: var(--ion-color-secondary);\\n}\\n.inputs-list .input-item {\\n  --padding-start: 0px;\\n  --padding-end: 0px;\\n  --inner-padding-end: 0px;\\n}\\n.inputs-list .error-container .error-message {\\n  margin: calc(var(--page-margin) / 2) 0px;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  color: var(--ion-color-danger);\\n  font-size: 14px;\\n}\\n.inputs-list .error-container .error-message ion-icon {\\n  -webkit-padding-end: calc(var(--page-margin) / 2);\\n          padding-inline-end: calc(var(--page-margin) / 2);\\n  flex-shrink: 0;\\n}\\n.ng-valid[required], .ng-valid.required, .ng-invalid[required], .ng-invalid.required {\\n  border-left: 2px solid #7951ff;\\n}\\n.form-animate {\\n  -webkit-transition: all 0.3s ease-out;\\n  transition: all 0.3s ease-out;\\n}\\n.header {\\n  font-size: 14px !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWRlL0Rlc2t0b3AvVXJhbnNlL3VyYW5zZS1tb2JpbGUvc3JjL2FwcC9wYWdlcy9zaGlwcGluZy9zaGlwcGluZy1mb3JtL3NoaXBwaW5nLWZvcm0ucGFnZS5zY3NzIiwic3JjL2FwcC9wYWdlcy9zaGlwcGluZy9zaGlwcGluZy1mb3JtL3NoaXBwaW5nLWZvcm0ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsNkNBQUE7RUFFQSwyRUFBQTtBQ0FGO0FERUU7RUFDRSwwQkFBQTtVQUFBLHlCQUFBO0FDQUo7QURFSTtFQUNFLHlCQUFBO0VBQ0EsZUFBQTtFQUNBLGlDQUFBO0FDQU47QURJRTtFQUNFLG9CQUFBO0VBQ0Esa0JBQUE7RUFDQSx3QkFBQTtBQ0ZKO0FETUU7RUFDRSx3Q0FBQTtFQUNBLG9CQUFBO0VBQUEsYUFBQTtFQUNBLHlCQUFBO1VBQUEsbUJBQUE7RUFDQSw4QkFBQTtFQUNBLGVBQUE7QUNKSjtBRE1JO0VBQ0UsaURBQUE7VUFBQSxnREFBQTtFQUNBLGNBQUE7QUNKTjtBRFVBO0VBQ0UsOEJBQUE7QUNQRjtBRFNBO0VBQ0UscUNBQUE7RUFBQSw2QkFBQTtBQ05GO0FEUUE7RUFDRSwwQkFBQTtBQ0xGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvc2hpcHBpbmcvc2hpcHBpbmctZm9ybS9zaGlwcGluZy1mb3JtLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5pbnB1dHMtbGlzdCB7XG4gIC0taW9uLWl0ZW0tYmFja2dyb3VuZDogdmFyKC0tcGFnZS1iYWNrZ3JvdW5kKTtcblxuICBwYWRkaW5nOiB2YXIoLS1wYWdlLW1hcmdpbikgdmFyKC0tcGFnZS1tYXJnaW4pIGNhbGModmFyKC0tcGFnZS1tYXJnaW4pICogMik7XG5cbiAgaW9uLWxpc3QtaGVhZGVyIHtcbiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4O1xuXG4gICAgLmhlYWRlci10aXRsZSB7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1zZWNvbmRhcnkpO1xuICAgIH1cbiAgfVxuXG4gIC5pbnB1dC1pdGVtIHtcbiAgICAtLXBhZGRpbmctc3RhcnQ6IDBweDtcbiAgICAtLXBhZGRpbmctZW5kOiAwcHg7XG4gICAgLS1pbm5lci1wYWRkaW5nLWVuZDogMHB4O1xuICB9XG5cbi5lcnJvci1jb250YWluZXIge1xuICAuZXJyb3ItbWVzc2FnZSB7XG4gICAgbWFyZ2luOiBjYWxjKHZhcigtLXBhZ2UtbWFyZ2luKSAvIDIpIDBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1kYW5nZXIpO1xuICAgIGZvbnQtc2l6ZTogMTRweDtcblxuICAgIGlvbi1pY29uIHtcbiAgICAgIHBhZGRpbmctaW5saW5lLWVuZDogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKTtcbiAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgIH1cbiAgfVxufVxufVxuXG4ubmctdmFsaWRbcmVxdWlyZWRdLCAubmctdmFsaWQucmVxdWlyZWQsIC5uZy1pbnZhbGlkW3JlcXVpcmVkXSwgLm5nLWludmFsaWQucmVxdWlyZWQgIHtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjNzk1MWZmO1xufVxuLmZvcm0tYW5pbWF0ZXtcbiAgdHJhbnNpdGlvbjogYWxsIC4zcyBlYXNlLW91dDtcbn1cbi5oZWFkZXJ7XG4gIGZvbnQtc2l6ZTogMTRweCAhaW1wb3J0YW50O1xufSIsIi5pbnB1dHMtbGlzdCB7XG4gIC0taW9uLWl0ZW0tYmFja2dyb3VuZDogdmFyKC0tcGFnZS1iYWNrZ3JvdW5kKTtcbiAgcGFkZGluZzogdmFyKC0tcGFnZS1tYXJnaW4pIHZhcigtLXBhZ2UtbWFyZ2luKSBjYWxjKHZhcigtLXBhZ2UtbWFyZ2luKSAqIDIpO1xufVxuLmlucHV0cy1saXN0IGlvbi1saXN0LWhlYWRlciB7XG4gIHBhZGRpbmctaW5saW5lLXN0YXJ0OiAwcHg7XG59XG4uaW5wdXRzLWxpc3QgaW9uLWxpc3QtaGVhZGVyIC5oZWFkZXItdGl0bGUge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGNvbG9yOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbn1cbi5pbnB1dHMtbGlzdCAuaW5wdXQtaXRlbSB7XG4gIC0tcGFkZGluZy1zdGFydDogMHB4O1xuICAtLXBhZGRpbmctZW5kOiAwcHg7XG4gIC0taW5uZXItcGFkZGluZy1lbmQ6IDBweDtcbn1cbi5pbnB1dHMtbGlzdCAuZXJyb3ItY29udGFpbmVyIC5lcnJvci1tZXNzYWdlIHtcbiAgbWFyZ2luOiBjYWxjKHZhcigtLXBhZ2UtbWFyZ2luKSAvIDIpIDBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1kYW5nZXIpO1xuICBmb250LXNpemU6IDE0cHg7XG59XG4uaW5wdXRzLWxpc3QgLmVycm9yLWNvbnRhaW5lciAuZXJyb3ItbWVzc2FnZSBpb24taWNvbiB7XG4gIHBhZGRpbmctaW5saW5lLWVuZDogY2FsYyh2YXIoLS1wYWdlLW1hcmdpbikgLyAyKTtcbiAgZmxleC1zaHJpbms6IDA7XG59XG5cbi5uZy12YWxpZFtyZXF1aXJlZF0sIC5uZy12YWxpZC5yZXF1aXJlZCwgLm5nLWludmFsaWRbcmVxdWlyZWRdLCAubmctaW52YWxpZC5yZXF1aXJlZCB7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgIzc5NTFmZjtcbn1cblxuLmZvcm0tYW5pbWF0ZSB7XG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2Utb3V0O1xufVxuXG4uaGVhZGVyIHtcbiAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XG59Il19 */\"","import { PackageTypes } from './../../../config/packageTypes';\nimport { SpinnerService } from './../../../services/spinner.service';\nimport { AlertService } from './../../../services/alert.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Validators, FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {COUNTRYLIST} from './../../../config/countries';\n\n\n@Component({\n  selector: 'app-shipping-form',\n  templateUrl: './shipping-form.page.html',\n  styleUrls: ['./shipping-form.page.scss'],\n})\nexport class ShippingFormPage implements OnInit {\n  senderForm: FormGroup;\n  destinationForm: FormGroup;\n  packageForm: FormGroup;\n  countries = [];\n  states = [];\n  packageTypes = [];\n  step = 0;\n  totalStep = 4;\n  progressValue = this.step / this.totalStep;\n  maxWeight;\n  maxHeight;\n  maxLength;\n  maxWidth;\n\n  validations = {\n    'name': [\n      { type: 'required', message: 'Name is required.' },\n    ],\n    'businessname': [\n      { type: 'minlength', message: 'Business name must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Business name cannot be more than 50 characters long.' },\n    ],\n    'address1': [\n      { type: 'required', message: 'Address is required.' },\n      { type: 'minlength', message: 'Address must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 50 characters long.' },\n    ],\n    'address2': [\n      { type: 'minlength', message: 'Address must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 50 characters long.' },\n    ],\n    'postalcode': [\n      { type: 'minlength', message: 'Address must be at least 3 characters long.' },\n      { type: 'maxlength', message: 'Address cannot be more than 6 characters long.' },\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'pattern', message: 'Enter a valid phone number.' }\n    ],\n    'city': [\n      { type: 'required', message: 'City is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'weight': [\n      { type: 'required', message: 'Weight is required.' },\n      { type: 'pattern', message: 'Weight entered is invalid.' },\n      { type: 'min', message: 'Weight min value not met.' },\n      { type: 'max', message: 'Weight max value exceeded.' },\n    ],\n    'length': [\n      { type: 'required', message: 'Length is required.' },\n      { type: 'pattern', message: 'Length entered is invalid.' },\n      { type: 'min', message: 'Length min value not met.' },\n      { type: 'max', message: 'Length max value exceeded.' },\n    ],\n    'width': [\n      { type: 'required', message: 'Width is required.' },\n      { type: 'pattern', message: 'Width entered is invalid.' },\n      { type: 'min', message: 'Width min value not met.' },\n      { type: 'max', message: 'Width max value exceeded.' },\n    ],\n    'height': [\n      { type: 'required', message: 'Height is required.' },\n      { type: 'pattern', message: 'Height entered is invalid.' },\n      { type: 'min', message: 'Height min value not met.' },\n      { type: 'max', message: 'Height max value exceeded.' },\n    ],\n    'value': [\n      { type: 'pattern', message: 'value entered is invalid.' }\n    ],\n    'description': [\n      { type: 'minlength', message: 'description must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'description cannot be more than 100 characters long.' },\n    ],\n  };\n  constructor(private router: Router, private alert: AlertService, private spinner: SpinnerService) { }\n\n  ionViewWillEnter() {\n   this.spinner.presentLoading();\n  }\n  ionViewDidEnter() {\n   this.spinner.dismiss();\n  }\n\n  ngOnInit(): void {\n    this.step = 0;\n    this.countries = COUNTRYLIST;\n    this.states = this.countries[0].states;\n   // this.packageTypes = PackageTypes;\n   // this.packaging = '';\n    this.maxWeight = 150;\n    this.maxHeight = 100;\n    this.maxLength = 100;\n    this.maxWidth = 100;\n    // this.maxHeight = PackageTypes[0].maxHeight;\n    // this.maxLength = PackageTypes[0].maxLength;\n    // this.maxWidth = PackageTypes[0].maxLength;\n    //this.dimenssionUnit = '';\n    //this.packageDescription = PackageTypes[0].description;\n    this.senderForm = new FormGroup({\n      'name': new FormControl('', Validators.required),\n      'businessname': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'country': new FormControl(this.countries[0], Validators.required),\n      'address1': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5),\n        Validators.required\n      ])),\n      'address2': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'postalcode': new FormControl('', Validators.compose([\n        Validators.maxLength(6),\n        Validators.minLength(3)\n      ])),\n      'city': new FormControl('', Validators.required),\n      'state': new FormControl({disabled: true}, Validators.required),\n      'phone': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^\\\\+[1-9]\\\\d{1,14}$')\n      ])),\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.email,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n    });\n\n    this.destinationForm = new FormGroup({\n      'name': new FormControl('', Validators.required),\n      'businessname': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'country': new FormControl(this.countries[0], Validators.required),\n      'address1': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5),\n        Validators.required\n      ])),\n      'address2': new FormControl('', Validators.compose([\n        Validators.maxLength(50),\n        Validators.minLength(5)\n      ])),\n      'postalcode': new FormControl('', Validators.compose([\n        Validators.maxLength(6),\n        Validators.minLength(3)\n      ])),\n      'city': new FormControl('', Validators.required),\n      'state': new FormControl({disabled: true}, Validators.required),\n      'phone': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^\\\\+[1-9]\\\\d{1,14}$')\n      ])),\n      'email': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n    });\n\n    this.packageForm = new FormGroup({\n      //'packageType': new FormControl(this.packageTypes[0], Validators.required),\n      'weight': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[0-9]*(\\\\.\\\\d{1,2})?$'),\n        Validators.min(1),\n        Validators.max(this.maxWeight)\n      ])),\n      'length': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[0-9]*$'),\n        Validators.min(1),\n        Validators.max(this.maxLength)\n      ])),\n      'width': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[0-9]*$'),\n        Validators.min(1),\n        Validators.max(this.maxWidth)\n      ])),\n      'height': new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[0-9]*$'),\n        Validators.min(1),\n        Validators.max(this.maxHeight)\n      ])),\n      'description': new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.maxLength(100)\n      ])),\n      'value': new FormControl('', Validators.pattern('^[0-9]*$')),\n      'isHazardous': new FormControl('false'),\n      'requireSignature': new FormControl('false'),\n    });\n\n  }\n  onCountryChange(e) {\n    this.states = e.target.value.states;\n  }\n  // onChangePackaging(e) {\n  //   //this.packaging = e.target.value.type;\n  //   this.maxWeight = e.target.value.maxWeight;\n  //   this.maxHeight = e.target.value.maxHeight;\n  //   this.maxLength = e.target.value.maxLength;\n  //   this.maxWidth = e.target.value.maxWidth;\n  //   this.dimenssionUnit = e.target.value.lengthUnit;\n  //   this.packageDescription = e.target.value.description;\n  // }\n\n  next() {\n    this.spinner.presentLoading();\n    this.step += 1;\n    this.spinner.dismiss();\n    this.progressValue = this.step / this.totalStep;\n  }\n\n  prev() {\n    this.spinner.presentLoading();\n    if (this.step === 0) {\n      this.router.navigate(['home/ship']);\n      this.senderForm.reset();\n      this.destinationForm.reset();\n      this.spinner.dismiss();\n    } else {\n      this.step -= 1;\n      this.spinner.dismiss();\n      this.progressValue = this.step / this.totalStep;\n    }\n  }\n  navigateHome() {\n    this.router.navigate(['/home']);\n    this.senderForm.reset();\n    this.destinationForm.reset();\n  }\n}\n"],"sourceRoot":"webpack:///"}